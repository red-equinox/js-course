WEBVTT

1
00:00:01.770 --> 00:00:06.120
It's time to take a deep dive
into famous source code.

2
00:00:07.190 --> 00:00:11.630
We're going to take all
that we've learned and

3
00:00:11.630 --> 00:00:16.627
see if we can't use it to
understand the structure and

4
00:00:16.627 --> 00:00:20.978
style of famous well-used
open source code.

5
00:00:20.978 --> 00:00:25.500
The library's perhaps the most famous

6
00:00:25.500 --> 00:00:30.140
JavaScript library there is, is jQuery.

7
00:00:31.430 --> 00:00:33.230
We're going to examine it.

8
00:00:33.230 --> 00:00:35.900
We're going to dive into its source code.

9
00:00:35.900 --> 00:00:40.120
We're not going to try and understand
how every feature is implemented, but

10
00:00:40.120 --> 00:00:44.070
we're going to try to see
one if we can read the code.

11
00:00:44.070 --> 00:00:48.320
And two,
If we can learn from how it's structured,

12
00:00:48.320 --> 00:00:52.290
if we can gain some knowledge and
some techniques, and

13
00:00:52.290 --> 00:00:57.293
borrow some ideas from inside
source code of jQuery.

14
00:00:58.310 --> 00:01:02.300
If you've done any JavaScript coding or
any web development in general,

15
00:01:02.300 --> 00:01:07.010
to be honest, you're probably
at least familiar with jQuery.

16
00:01:08.330 --> 00:01:11.770
If not, jQuery is a JavaScript library

17
00:01:12.810 --> 00:01:17.960
that doesn't add any features to
the browser or to JavaScript itself.

18
00:01:17.960 --> 00:01:21.230
It's just a JavaScript library.

19
00:01:21.230 --> 00:01:24.840
What it does do is make it easier to type

20
00:01:26.120 --> 00:01:31.020
syntactically to write certain things and

21
00:01:31.020 --> 00:01:36.730
it deals with cross browser issues,
meaning that each browser,

22
00:01:36.730 --> 00:01:41.840
Firefox, Safari, Google Chrome,
Internet Explorer, and

23
00:01:41.840 --> 00:01:46.950
various mobile versions of these browsers,
all have their quirks and differences.

24
00:01:47.960 --> 00:01:50.768
jQuery handles those so
you don't have to worry about it.

25
00:01:50.768 --> 00:01:55.470
You just are doing what you want to do and

26
00:01:55.470 --> 00:01:59.710
the code inside of jQuery is
handling the browser quirks.

27
00:02:01.370 --> 00:02:06.620
What jQuery does essentially
is let you manipulate the DOM.

28
00:02:06.620 --> 00:02:09.230
The DOM is the Document Object Model
inside a browser.

29
00:02:10.260 --> 00:02:12.690
It's separate from the JavaScript engine.

30
00:02:12.690 --> 00:02:16.505
It's the thing that lets
the browser look at HTML and

31
00:02:16.505 --> 00:02:19.410
decide how to render it or
paint it on the screen.

32
00:02:20.750 --> 00:02:24.860
And JavaScript has access to the dom.

33
00:02:24.860 --> 00:02:26.360
It can manipulate it.

34
00:02:26.360 --> 00:02:31.050
It can manipulate the structure of
an HTML page after it's been loaded

35
00:02:31.050 --> 00:02:33.700
by manipulating the dom that's in memory.

36
00:02:33.700 --> 00:02:39.030
That is this tree like structure
that houses or stores.

37
00:02:39.030 --> 00:02:43.250
A representation of your HTML that's
used to paint or render on the screen.

38
00:02:45.140 --> 00:02:50.540
jQuery then makes it easy to look
at that tree, to look at the DOM,

39
00:02:50.540 --> 00:02:55.520
to find things, to find elements
on your page and manipulate them.

40
00:02:56.800 --> 00:02:59.980
So what is it that we actually
get when we use jQuery?

41
00:03:01.080 --> 00:03:06.900
Well, If I just have a variable,
let's say q, jQuery has

42
00:03:08.730 --> 00:03:13.850
a dollar sign for its name that you can
use, or you can use the word jQuery.

43
00:03:13.850 --> 00:03:16.760
We'll use dollar sign
cuz it's less typing.

44
00:03:16.760 --> 00:03:19.860
And then you pass it a string.

45
00:03:19.860 --> 00:03:24.230
You give it a string, and
what I've set up is a very basic

46
00:03:24.230 --> 00:03:29.710
HTML page that has our jQuery reference.

47
00:03:29.710 --> 00:03:35.687
At the time of the recording of this
course, we're using jQuery 1.11.2.

48
00:03:35.687 --> 00:03:40.620
You can use the latest if you like, and
then I have my app.js after the fact.

49
00:03:42.560 --> 00:03:47.820
Also note that jQuery has a 2.0 version,
but that isn't more up to date.

50
00:03:48.820 --> 00:03:52.200
The 2.0 version doesn't bother
with some really old browsers, so

51
00:03:52.200 --> 00:03:55.940
it removes some code that's there for
really old browsers.

52
00:03:55.940 --> 00:03:58.250
If your project doesn't
have to worry about that,

53
00:03:58.250 --> 00:04:01.700
then you might as well not have all
that extra code in the library.

54
00:04:01.700 --> 00:04:06.460
We're just gonna use 1.11.2, and that's
the one that we're going to examine.

55
00:04:06.460 --> 00:04:09.209
And even if we're looking at
a later version of jQuery,

56
00:04:09.209 --> 00:04:12.904
by the time you take this course,
the basic structure will still be valid.

57
00:04:12.904 --> 00:04:17.720
I've set up a div with an id and

58
00:04:17.720 --> 00:04:21.391
the class attribute.

59
00:04:21.391 --> 00:04:28.190
And I've set up a header and
an unordered list with three items in it.

60
00:04:28.190 --> 00:04:30.750
If you aren't familiar with html,
don't worry.

61
00:04:30.750 --> 00:04:33.750
This isn't a huge requirement for
this lecture.

62
00:04:33.750 --> 00:04:37.390
We're going to look at the source
code of jQuery itself, but

63
00:04:37.390 --> 00:04:39.100
we just wanted to understand what it does.

64
00:04:40.160 --> 00:04:46.440
So if I refresh this here, I have
a header and three items in the list.

65
00:04:47.610 --> 00:04:48.340
That's what this did.

66
00:04:49.860 --> 00:04:54.810
So in jQuery now,
what's happened is this is now sitting

67
00:04:54.810 --> 00:05:00.590
in reality in a tree-like representation
in memory inside the browser.

68
00:05:00.590 --> 00:05:03.160
And JavaScript has access to all of these.

69
00:05:03.160 --> 00:05:07.720
This would be a parent and
then a child and then a grandchild and

70
00:05:07.720 --> 00:05:08.510
on down the line.

71
00:05:08.510 --> 00:05:10.940
These are parent and
child kind of relationships.

72
00:05:12.670 --> 00:05:16.940
So jQuery lets me do something like ul,
and

73
00:05:16.940 --> 00:05:22.750
that would find me all
the uls inside the tree.

74
00:05:22.750 --> 00:05:27.810
And I can even search for a specific one,
like all uls that have a class people.

75
00:05:29.070 --> 00:05:33.740
And all ULs that have a class people,
I want to find all of the LIs

76
00:05:33.740 --> 00:05:37.490
that are children of ULs
that have a class people.

77
00:05:38.660 --> 00:05:40.800
If you're familiar with CSS,

78
00:05:40.800 --> 00:05:45.650
jQuery is essentially letting you query
the tree just like you would in CSS.

79
00:05:45.650 --> 00:05:52.120
Let's see what we get when we run this.

80
00:05:52.120 --> 00:05:56.650
When we get this object back from J query,
having passed in what I'm looking for.

81
00:05:59.060 --> 00:06:01.780
I'll refresh and open my console.

82
00:06:04.990 --> 00:06:05.610
Interesting.

83
00:06:06.920 --> 00:06:13.360
I get an objective of type jquery.fn.init,
not just jquery.

84
00:06:14.710 --> 00:06:17.950
And it looks to be an array,
or at least array like.

85
00:06:19.440 --> 00:06:24.090
That's a zero and that's my LI,
my second LI, and my third LI.

86
00:06:25.100 --> 00:06:29.370
And each LI is an element,
which is called a DOM element.

87
00:06:30.580 --> 00:06:34.460
It's got things like inner HTML InnerText.

88
00:06:34.460 --> 00:06:38.580
This is just a standard browser element.

89
00:06:38.580 --> 00:06:40.090
Nothing special there.

90
00:06:41.150 --> 00:06:46.120
But it did find them, and gave them to me.

91
00:06:46.120 --> 00:06:49.340
Let's look at my __proto__.

92
00:06:49.340 --> 00:06:53.480
That's a jQuery object, and

93
00:06:53.480 --> 00:06:57.530
if I open it up,
It has a whole bunch of methods on it.

94
00:06:58.660 --> 00:07:03.150
So remember how we said it's better
to put methods on the prototype

95
00:07:04.170 --> 00:07:05.320
to save memory space.

96
00:07:05.320 --> 00:07:06.110
Well here it is.

97
00:07:07.310 --> 00:07:10.960
We have a prototype that has
a huge number of features and

98
00:07:10.960 --> 00:07:16.280
functionality that make jQuery so
popular, all kinds of stuff we can do.

99
00:07:17.560 --> 00:07:20.260
So in some way we're
getting back an array,

100
00:07:21.620 --> 00:07:24.590
with a prototype that has
a whole lot of features,

101
00:07:24.590 --> 00:07:28.230
a whole lot of methods on it, things
that we can do then with this object.

102
00:07:29.490 --> 00:07:34.675
All right, and it's kind of unusual
that we're seeing .fn.init,

103
00:07:34.675 --> 00:07:36.785
that's a little unexpected.

104
00:07:36.785 --> 00:07:37.285
What is that?

105
00:07:38.895 --> 00:07:40.975
Well let's see how this is structured.

106
00:07:40.975 --> 00:07:43.366
And also note that we didn't
use the new operator.

107
00:07:43.366 --> 00:07:46.930
We just said $ and pass the string.

108
00:07:48.410 --> 00:07:50.040
Let's see how this is
working under the hood.

109
00:07:51.110 --> 00:07:56.380
I've downloaded the unmodified
development version of jQuery.

110
00:07:56.380 --> 00:07:59.191
So let's just open it.

111
00:07:59.191 --> 00:08:00.967
And here it is.

112
00:08:00.967 --> 00:08:03.427
Pretty huge with lots of comments.

113
00:08:03.427 --> 00:08:05.448
Cuz of all those comments and
it's unminified.

114
00:08:05.448 --> 00:08:09.540
It's over 10,000 lines long.

115
00:08:09.540 --> 00:08:11.480
We're not gonna go through
all of these lines.

116
00:08:12.620 --> 00:08:15.280
Let's look and see if we can
find things that look familiar.

117
00:08:15.280 --> 00:08:18.040
If we can understand it's structure,
and see what we can learn.

118
00:08:19.290 --> 00:08:20.190
No, wait a minute.

119
00:08:20.190 --> 00:08:22.580
I have a challenge for you.

120
00:08:22.580 --> 00:08:26.560
Before we go through the rest of this
lecture and the rest of this section.

121
00:08:27.780 --> 00:08:29.480
Stop right here.

122
00:08:29.480 --> 00:08:30.480
Pause this video.

123
00:08:31.790 --> 00:08:34.920
And go take a look at J query for
yourself.

124
00:08:34.920 --> 00:08:38.760
You have the tools to understand
a lot of what you're seeing.

125
00:08:38.760 --> 00:08:41.240
Maybe not everything, but don't be afraid.

126
00:08:42.460 --> 00:08:44.970
Don't be intimidated
by the amount of code.

127
00:08:46.110 --> 00:08:50.530
There are very few things in here that
you haven't seen in this course already.

128
00:08:51.600 --> 00:08:57.120
So I challenge you to stop, and take a
look around inside the jQuery source code.

129
00:08:57.120 --> 00:08:58.790
Look at the structure.

130
00:08:58.790 --> 00:09:02.560
See if you can find, The immediately
invoked function expressions.

131
00:09:02.560 --> 00:09:06.470
Where we're using Object Literal syntax.

132
00:09:06.470 --> 00:09:07.730
Head to the bottom of it,

133
00:09:07.730 --> 00:09:10.636
and see if you can understand how
it's exposed in the global object.

134
00:09:10.636 --> 00:09:16.570
Find where the jQuery.fn.inet is
being used, and what does that mean?

135
00:09:16.570 --> 00:09:19.720
We're going to go through all of that.

136
00:09:21.030 --> 00:09:23.520
But my challenge is to pause right now.

137
00:09:24.860 --> 00:09:27.020
Take a look for yourself.

138
00:09:27.020 --> 00:09:27.610
Ready?

139
00:09:29.943 --> 00:09:30.443
Go for it.

140
00:09:33.530 --> 00:09:34.240
Alright, are you back?

141
00:09:35.550 --> 00:09:36.090
Let's keep going.

142
00:09:37.640 --> 00:09:39.900
For starters,
it has a nice introductory comment.

143
00:09:41.240 --> 00:09:43.527
And then, what's the first thing we see?

144
00:09:44.568 --> 00:09:45.780
You guessed it.

145
00:09:47.570 --> 00:09:50.790
It's an immediately invoked
function expression.

146
00:09:52.010 --> 00:09:53.620
It's using the parentheses to trick

147
00:09:55.030 --> 00:09:59.270
the syntax parser into treating
this as a function expression.

148
00:09:59.270 --> 00:10:04.150
So it's wrapping those entire lines,
all the features of jQuery.

149
00:10:04.150 --> 00:10:06.160
Inside a function call.

150
00:10:07.470 --> 00:10:08.340
So that makes sense.

151
00:10:10.320 --> 00:10:13.620
The function itself, takes two parameters.

152
00:10:14.800 --> 00:10:16.310
Global and factory.

153
00:10:17.980 --> 00:10:20.200
Well that makes sense, we did that before.

154
00:10:20.200 --> 00:10:22.600
Deciding what is the global object.

155
00:10:22.600 --> 00:10:24.420
In fact, if I look here.

156
00:10:25.490 --> 00:10:30.370
It's checking for something called module,
and using the typeof, you've seen that.

157
00:10:30.370 --> 00:10:35.010
It's checking to see of module is
an object and module.exports is an object.

158
00:10:35.010 --> 00:10:39.960
And the comment tells us this is for
CommonJS like environments.

159
00:10:39.960 --> 00:10:41.110
Or node.js.

160
00:10:41.110 --> 00:10:43.140
So it looks like what it's doing,

161
00:10:43.140 --> 00:10:47.400
is it's checking to see what the
environment is that jQuery is living in.

162
00:10:47.400 --> 00:10:52.360
And then making certain decisions
about how to work with the global

163
00:10:52.360 --> 00:10:54.070
object in those cases.

164
00:10:54.070 --> 00:10:57.340
I don't need to worry
about this too much then.

165
00:10:57.340 --> 00:10:59.420
Let's see where it actually calls.

166
00:10:59.420 --> 00:11:02.239
Well actually it calls this function
there, it's immediately invoked.

167
00:11:04.030 --> 00:11:08.420
So it immediately invokes this here,
and passes as the global.

168
00:11:09.680 --> 00:11:10.240
See this?

169
00:11:10.240 --> 00:11:15.420
There's the global, and here's where
it's invoking this function expression.

170
00:11:15.420 --> 00:11:17.850
It's checking to see if
there's a window object.

171
00:11:19.130 --> 00:11:19.850
So that's neat.

172
00:11:19.850 --> 00:11:25.020
We understand that in the browser,
the global object is window.

173
00:11:25.020 --> 00:11:29.400
So if window is not equal to undefined.

174
00:11:29.400 --> 00:11:31.150
Oh this is a ternary operator.

175
00:11:32.510 --> 00:11:34.260
It takes three parameters.

176
00:11:34.260 --> 00:11:36.443
The first parameter is a boolean.

177
00:11:36.443 --> 00:11:39.401
If the boolean is true, it returns this.

178
00:11:39.401 --> 00:11:42.470
If the boolean is False.

179
00:11:42.470 --> 00:11:47.050
Then it returns whatever's on
the other side of the colon.

180
00:11:47.050 --> 00:11:50.950
So it's saying,
if window is not equal to undefined.

181
00:11:50.950 --> 00:11:56.090
And notice, it uses the strict,
not going to coerce.

182
00:11:56.090 --> 00:11:56.805
Not equals.

183
00:11:56.805 --> 00:11:58.079
Because it's not double equals.

184
00:11:59.580 --> 00:12:06.260
If window is not undefined then
pass window to this global.

185
00:12:06.260 --> 00:12:08.320
Otherwise pass whatever
this is pointing to.

186
00:12:08.320 --> 00:12:12.510
Which would be the global object in
whatever environment you're sitting in.

187
00:12:12.510 --> 00:12:14.230
Maybe JS or something.

188
00:12:15.500 --> 00:12:17.100
And then it passes a factory.

189
00:12:17.100 --> 00:12:22.400
And it looks like that factory
is what's returned in this case.

190
00:12:22.400 --> 00:12:25.340
So this is actually
the function expression

191
00:12:25.340 --> 00:12:27.170
that wraps a whole bunch of code.

192
00:12:28.280 --> 00:12:28.780
See that?

193
00:12:29.790 --> 00:12:32.450
So this is just taking care
of where is jQuery sitting.

194
00:12:33.860 --> 00:12:37.930
And this is actually the jQuery code.

195
00:12:37.930 --> 00:12:43.353
Alright.
So, this is another function expression.

196
00:12:43.353 --> 00:12:49.070
This one is window, and noGlobal.

197
00:12:49.070 --> 00:12:50.110
Let's try to remember that.

198
00:12:50.110 --> 00:12:55.730
But we do know that we're getting
the window object as some point in here.

199
00:12:55.730 --> 00:12:58.000
When this factory is
actually being invoked.

200
00:12:58.000 --> 00:12:58.500
See that?

201
00:12:58.500 --> 00:13:00.250
it's invoked up there.

202
00:13:00.250 --> 00:13:04.070
And it's being passed in
to this function here.

203
00:13:04.070 --> 00:13:06.250
This function expression
is being passed to factory.

204
00:13:06.250 --> 00:13:08.860
And factory's being invoked at some point.

205
00:13:08.860 --> 00:13:11.110
All right.
So what happens when this is invoked?

206
00:13:13.150 --> 00:13:17.149
Well, it sets up some variables
in this new execution context.

207
00:13:18.580 --> 00:13:19.710
See that?

208
00:13:19.710 --> 00:13:21.470
When the factory is invoked,

209
00:13:21.470 --> 00:13:25.000
which ends up being this
function object that's passed in.

210
00:13:25.000 --> 00:13:29.810
I get a new execution context, and
it starts creating some variables.

211
00:13:31.120 --> 00:13:34.020
All right, here's the important one here.

212
00:13:34.020 --> 00:13:35.230
Let's see.

213
00:13:35.230 --> 00:13:36.740
jQuery.

214
00:13:36.740 --> 00:13:42.740
We know that's the one that we can use
in our code, in order to call this.

215
00:13:42.740 --> 00:13:44.240
And as expected, it's a function.

216
00:13:45.470 --> 00:13:48.320
And it takes a selector, and a context.

217
00:13:49.850 --> 00:13:51.420
Well we've already used the selector.

218
00:13:51.420 --> 00:13:54.220
That's what jQuery calls that string where

219
00:13:54.220 --> 00:13:57.940
you're passing in what HTML
elements you're trying to find.

220
00:13:59.620 --> 00:14:00.190
So that's neat.

221
00:14:01.450 --> 00:14:04.960
But I'm surprised here,
that I don't have a bunch of code.

222
00:14:06.090 --> 00:14:14.080
Instead it's returning and then using
the new operator jQuery.fn.init.

223
00:14:14.080 --> 00:14:17.555
Oh and remember,
when we created a jQuery object.

224
00:14:17.555 --> 00:14:23.400
In here and console.logged it.

225
00:14:23.400 --> 00:14:25.290
Remember what that was?

226
00:14:25.290 --> 00:14:28.920
It was a jQuery.fn.init.

227
00:14:28.920 --> 00:14:30.860
So this makes sense.

228
00:14:30.860 --> 00:14:34.910
The jQuery function isn't
a function constructor.

229
00:14:34.910 --> 00:14:36.470
It's just a function.

230
00:14:36.470 --> 00:14:39.450
That's why we don't have
to use the new operator.

231
00:14:41.920 --> 00:14:45.655
All it is is a function
that returns an object.

232
00:14:45.655 --> 00:14:50.415
But it does return an object by
calling a function constructor.

233
00:14:50.415 --> 00:14:50.915
See that?

234
00:14:52.215 --> 00:14:53.405
It uses the new keyword.

235
00:14:53.405 --> 00:14:58.455
So it keeps me from having to use
the new keyword myself all the time.

236
00:14:58.455 --> 00:15:01.505
And possibly forgetting
it when using jQuery.

237
00:15:01.505 --> 00:15:02.925
That's a neat trick.

238
00:15:02.925 --> 00:15:07.172
A function that returns a call
to a function constructor.

239
00:15:07.172 --> 00:15:12.090
Keeps me from having to use the new
keyword myself, when I use J query.

240
00:15:13.490 --> 00:15:14.780
Alright, so let's keep that in mind.

241
00:15:15.880 --> 00:15:19.940
So somewhere down the line
we're going to find out that

242
00:15:19.940 --> 00:15:21.680
this somewhere is a function constructor.

243
00:15:22.700 --> 00:15:28.330
So init function constructor
sitting on some fn object.

244
00:15:28.330 --> 00:15:30.800
Which will be sitting
on this jQuery object.

245
00:15:32.520 --> 00:15:33.410
Alright, so moving on.

246
00:15:33.410 --> 00:15:36.595
Let's see if we can find, oh here we go.

247
00:15:36.595 --> 00:15:40.480
Jquery.fm, there it is.

248
00:15:40.480 --> 00:15:40.980
What is it?

249
00:15:42.680 --> 00:15:43.650
Well, it's a reference.

250
00:15:44.760 --> 00:15:49.510
Remember that these are objects, and
therefore they're passed by reference.

251
00:15:49.510 --> 00:15:53.348
So fn is pointing at the same memory spot,

252
00:15:53.348 --> 00:15:58.073
as the prototype property
of the jQuery function.

253
00:15:58.073 --> 00:16:01.799
Remember all functions get
a .prototype property.

254
00:16:01.799 --> 00:16:05.351
Which is used if they're used
as a function constructor.

255
00:16:05.351 --> 00:16:07.430
But it's really just hanging out there.

256
00:16:07.430 --> 00:16:10.620
Even though we're not using this as
a function constructor, it's still there.

257
00:16:11.810 --> 00:16:13.690
It's just an empty object.

258
00:16:13.690 --> 00:16:21.115
So it's using this empty object and
having an alias for it.

259
00:16:21.115 --> 00:16:24.885
I guess that's just so it doesn't
have to type .prototype all the time.

260
00:16:24.885 --> 00:16:28.345
We can just type .fn,
it's a lot faster to type.

261
00:16:28.345 --> 00:16:29.815
All right.
So when we see that .fn,

262
00:16:29.815 --> 00:16:33.695
we need to remember that this
just means function prototype.

263
00:16:33.695 --> 00:16:38.535
The prototype property on this function,
the same prototype all functions get.

264
00:16:39.575 --> 00:16:44.880
And it's being overwritten with a new
object, see the object literal syntax.

265
00:16:46.420 --> 00:16:50.430
It's creating a bunch of name value pairs,
a bunch of properties.

266
00:16:50.430 --> 00:16:54.480
All right, so if we go down, let's
see what's inside this jQuery.fn that

267
00:16:55.930 --> 00:16:59.510
has all of these properties.

268
00:16:59.510 --> 00:17:02.630
Well, we have some things we're
not gonna worry about too much.

269
00:17:03.950 --> 00:17:07.450
Well, here are some things we've seen,
each and map using a callback.

270
00:17:08.850 --> 00:17:13.360
So you're passing
a callback to a function.

271
00:17:14.960 --> 00:17:19.010
And look, on that for example,
it does callback.call.

272
00:17:19.010 --> 00:17:22.930
So it is invoking whatever function
you give it in the map and

273
00:17:22.930 --> 00:17:26.750
probably acting on that element.

274
00:17:26.750 --> 00:17:29.060
Well that's kind of like out map for
each, remember?

275
00:17:30.350 --> 00:17:35.790
It's calling back whatever we
give it on some list of things.

276
00:17:35.790 --> 00:17:37.110
We'll just go on,

277
00:17:37.110 --> 00:17:40.200
cuz it looks like there's some other
deeper functions that do this.

278
00:17:42.170 --> 00:17:47.410
So it started off with this
object that has these properties.

279
00:17:47.410 --> 00:17:48.430
What's the next thing I see?

280
00:17:49.800 --> 00:17:51.630
Well, this is interesting.

281
00:17:51.630 --> 00:17:53.000
Another double reference,

282
00:17:53.000 --> 00:17:57.930
so essentially an alias giving
two names to the same function.

283
00:17:57.930 --> 00:17:59.040
It's a function object.

284
00:17:59.040 --> 00:18:00.800
We've got a function expression here.

285
00:18:00.800 --> 00:18:02.280
And it's called extend.

286
00:18:02.280 --> 00:18:04.910
Hey, I bet that's the same concept
that we saw in underscore.

287
00:18:06.470 --> 00:18:09.640
So it's being added to the .fn and

288
00:18:09.640 --> 00:18:14.060
to jQuery itself,
as a reference to the one single function.

289
00:18:14.060 --> 00:18:17.850
And inside it,
it looks like it's doing some kind of

290
00:18:19.330 --> 00:18:23.160
deep copy, and adding on objects.

291
00:18:23.160 --> 00:18:28.410
Yeah, this is the same as the underscore
essentially, that we saw where

292
00:18:28.410 --> 00:18:33.390
it's adding things to an object.

293
00:18:33.390 --> 00:18:36.320
It's taking properties and methods off
one object and adding them to another.

294
00:18:37.570 --> 00:18:40.490
So it's looking at the arguments.length,
so

295
00:18:40.490 --> 00:18:43.330
I probably can pass in as
many objects as I want.

296
00:18:44.790 --> 00:18:49.970
Let's see and yeah we have a for
loop on the length.

297
00:18:49.970 --> 00:18:55.530
So on all of the arguments so if I pass
in a bunch of objects as arguments

298
00:18:55.530 --> 00:18:59.770
to this function as parameters it'll go
through all of them and add all of there.

299
00:19:01.310 --> 00:19:02.060
Yeah see the for in.

300
00:19:03.380 --> 00:19:09.380
So if I add three objects for
example to this extend function,

301
00:19:09.380 --> 00:19:12.890
I'll end up with a length of three.

302
00:19:12.890 --> 00:19:16.310
And it'll find each argument and
then it'll go through using for

303
00:19:16.310 --> 00:19:17.990
in that we saw before.

304
00:19:19.190 --> 00:19:23.347
It's using reflection to go
through all the properties and

305
00:19:23.347 --> 00:19:28.267
methods of every object that I add or
that I passed in to this function.

306
00:19:28.267 --> 00:19:32.185
And what is it doing with this for in?

307
00:19:32.185 --> 00:19:37.330
For names,
we need to find whatever name is used and

308
00:19:37.330 --> 00:19:42.330
see what it's doing, well,
it's doing a source and a copy.

309
00:19:43.550 --> 00:19:46.490
So, without getting too
much into what it's doing,

310
00:19:47.550 --> 00:19:50.710
it basically looks like
it's doing what we said.

311
00:19:50.710 --> 00:19:57.360
It's adding on properties and
methods of an object to an object.

312
00:19:59.210 --> 00:20:00.110
That's interesting.

313
00:20:01.190 --> 00:20:05.470
We have a target, and

314
00:20:05.470 --> 00:20:09.470
our target is, what is our target?

315
00:20:09.470 --> 00:20:11.690
Our target is our first argument.

316
00:20:11.690 --> 00:20:17.510
So the first thing we pass to extend
is what we want to actually extend,

317
00:20:17.510 --> 00:20:21.460
where we want to drop these properties and
methods, which object is receiving them.

318
00:20:22.560 --> 00:20:25.690
And the rest of the parameters and
which objects hold them.

319
00:20:25.690 --> 00:20:28.190
So we're adding all of the other
parameters to the first one.

320
00:20:28.190 --> 00:20:29.733
All right, so that's neat.

321
00:20:29.733 --> 00:20:34.450
So source is where we're copying
our methods and properties to.

322
00:20:35.760 --> 00:20:38.370
And so it's adding a new method and
property.

323
00:20:39.610 --> 00:20:45.570
But it's using extend again, probably
because objects can hold other objects.

324
00:20:45.570 --> 00:20:49.130
So it's making sure that every
possible method and property,

325
00:20:49.130 --> 00:20:52.410
even of sub-objects,
is being added on to our target.

326
00:20:52.410 --> 00:20:57.570
All right, so we have this really cool
extend method that's really serious.

327
00:20:57.570 --> 00:21:00.290
I mean, it does a good job of extending.

328
00:21:00.290 --> 00:21:03.600
And we can pass it an object or
even sub-objects, and I'll get all those

329
00:21:03.600 --> 00:21:09.910
methods and properties on my target
object where I want them to be.

330
00:21:09.910 --> 00:21:11.100
In fact, right away it uses it.

331
00:21:11.100 --> 00:21:12.590
Look at that.

332
00:21:12.590 --> 00:21:19.358
It calls extend and adds methods and
properties to the jQuery object.

333
00:21:19.358 --> 00:21:21.073
Neat.

334
00:21:21.073 --> 00:21:26.880
Okay, so wait a minute,
wasn't the first argument the target?

335
00:21:28.230 --> 00:21:28.730
Let's see.

336
00:21:29.770 --> 00:21:30.760
What else can we learn here?

