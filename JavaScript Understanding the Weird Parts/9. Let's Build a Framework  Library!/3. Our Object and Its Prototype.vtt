WEBVTT

1
00:00:02.440 --> 00:00:07.140
Now it's time to set up our Greetr
object and this will be a bit tricky

2
00:00:07.140 --> 00:00:10.780
because we want to set it up
the way that jQuery is set up.

3
00:00:10.780 --> 00:00:12.880
We're going to imitate jQuery's structure.

4
00:00:14.430 --> 00:00:19.450
What I want to do is set up my Greetr so
that it generates an object so

5
00:00:19.450 --> 00:00:23.280
it'll be a function,
a function that generates an object.

6
00:00:23.280 --> 00:00:27.810
But what I'd like to do whenever I use
Greetr is I'd like to just say G$, and

7
00:00:27.810 --> 00:00:32.490
then pass firstName, lastName, and
maybe language, and that's it.

8
00:00:32.490 --> 00:00:37.990
And what it gives me back is an object,
kind of like jQuery does.

9
00:00:37.990 --> 00:00:41.030
So, I don't want to have
to say new all the time.

10
00:00:42.420 --> 00:00:44.970
So, let's do that now.

11
00:00:44.970 --> 00:00:50.326
How can I set up
a function that does this?

12
00:00:50.326 --> 00:00:55.831
Let's get started,
we'll set up a function,

13
00:00:55.831 --> 00:01:00.930
a firstName, a lastName, and a language.

14
00:01:00.930 --> 00:01:06.275
And now I want it, instead of being
a function constructor, so I have to

15
00:01:06.275 --> 00:01:12.850
use new, I want it to return the results
of a different function constructor.

16
00:01:12.850 --> 00:01:15.940
Maybe like a .init, just like jQuery did.

17
00:01:15.940 --> 00:01:16.840
You wanna try that yourself?

18
00:01:18.250 --> 00:01:22.391
Try to see if you can create
a separate function constructor,

19
00:01:22.391 --> 00:01:27.500
Greetr.init, that takes the same
firstName, lastName, and language.

20
00:01:28.860 --> 00:01:32.738
And then have this function right here,
this Greetr function

21
00:01:32.738 --> 00:01:37.000
return a new object created with
that other function constructor.

22
00:01:37.000 --> 00:01:40.716
Go back and
look at it on jQuery if you want to again.

23
00:01:40.716 --> 00:01:41.712
Think about it a bit.

24
00:01:41.712 --> 00:01:44.352
At least give it a try.

25
00:01:44.352 --> 00:01:46.790
All right, ready?

26
00:01:46.790 --> 00:01:50.225
Return new something.

27
00:01:50.225 --> 00:01:55.205
Well, I'm going to need a Greetr and
I'm going to do a property on my Greetr.

28
00:01:58.960 --> 00:02:01.215
It's gonna take the same thing.

29
00:02:01.215 --> 00:02:04.335
So it's return new, so
I'm going to return and

30
00:02:04.335 --> 00:02:08.080
then use a function constructor
to generate the object.

31
00:02:08.080 --> 00:02:14.440
That way I don't have to always setup
the object with the new keyword.

32
00:02:15.830 --> 00:02:21.550
Then I'll do Greetr.init and
this is the actual function.

33
00:02:27.341 --> 00:02:32.107
And notice that it's okay that I'm
setting this up after this because

34
00:02:32.107 --> 00:02:35.620
this won't be called until
I actually use Greetr.

35
00:02:35.620 --> 00:02:39.560
So by the time this is actually called,
this will all be set up.

36
00:02:39.560 --> 00:02:40.980
All this other code will be already run.

37
00:02:42.530 --> 00:02:47.060
All right, so I'm going to set
up some default properties.

38
00:02:47.060 --> 00:02:49.920
Do you wanna try that?

39
00:02:49.920 --> 00:02:53.000
Set up some default values for
firstName, lastName, and language.

40
00:02:53.000 --> 00:02:55.050
How would you do that?

41
00:02:56.060 --> 00:03:00.310
If I pass in firstName I want
to use the firstName I pass in.

42
00:03:00.310 --> 00:03:03.160
But if I don't, I want to set a default.

43
00:03:03.160 --> 00:03:05.210
And I want to add firstName, lastName and

44
00:03:05.210 --> 00:03:10.650
language to this empty object that's
created by new so I need to use this.

45
00:03:12.550 --> 00:03:13.110
Give it a thought.

46
00:03:14.980 --> 00:03:18.530
How can I set up my new object,
because that's what I'm doing?

47
00:03:18.530 --> 00:03:23.091
I'm doing a function constructor so
I'm building an object,

48
00:03:23.091 --> 00:03:28.865
building this new object that's going
to be returned by the greeter function.

49
00:03:28.865 --> 00:03:33.417
All right, well I'm gonna use
my nice self, just to be safe.

50
00:03:33.417 --> 00:03:35.341
Self is the same as this, so

51
00:03:35.341 --> 00:03:40.201
that I don't have to worry about
what this variable points to later.

52
00:03:40.201 --> 00:03:43.975
And I'll set up,
I'll build my object because this, and

53
00:03:43.975 --> 00:03:48.147
now self points to the empty object
created by the new operator.

54
00:03:48.147 --> 00:03:53.813
And I passed in firstName so I'll use or
and then I'll default to an empty string.

55
00:03:53.813 --> 00:04:01.545
And I'll build my object again,
the new property and one more.

56
00:04:01.545 --> 00:04:02.805
What should be our default language?

57
00:04:02.805 --> 00:04:04.325
Let's say English.

58
00:04:04.325 --> 00:04:05.645
En for English.

59
00:04:07.185 --> 00:04:07.935
All right, so that's it.

60
00:04:09.455 --> 00:04:15.160
I have a function constructor that builds
an object and gives it three properties

61
00:04:15.160 --> 00:04:18.540
and sets its value if you pass something
into the function constructor,

62
00:04:18.540 --> 00:04:19.800
otherwise set some defaults.

63
00:04:21.680 --> 00:04:22.690
Now what about the prototype?

64
00:04:24.550 --> 00:04:30.717
Well I want to use Greetr.prototype
because it looks nicer in my code and

65
00:04:30.717 --> 00:04:35.110
that's just gonna be an empty object for
now.

66
00:04:35.110 --> 00:04:39.980
And here is where I'll put any
methods that I want to use

67
00:04:39.980 --> 00:04:43.060
inside my object that's
returned from Greetr.

68
00:04:44.690 --> 00:04:48.400
But in order to do that that means
that this object here that's created

69
00:04:49.800 --> 00:04:51.540
needs to point to this as its prototype.

70
00:04:53.270 --> 00:04:54.440
Remember how jQuery did that?

71
00:04:56.890 --> 00:05:02.480
Well any object returned from this
function constructor will point where for

72
00:05:02.480 --> 00:05:03.330
its prototype.

73
00:05:03.330 --> 00:05:06.466
Where will an object
created from this function,

74
00:05:06.466 --> 00:05:11.540
which is Greetr.init,
where will an object created from here,

75
00:05:11.540 --> 00:05:15.200
where will its prototype,
its proto property be pointing at?

76
00:05:15.200 --> 00:05:16.765
Remember, those names
are a little confusing.

77
00:05:16.765 --> 00:05:23.560
Greetr.init.protoype, this is a function.

78
00:05:23.560 --> 00:05:27.880
Any object created with this
function as a function constructor,

79
00:05:29.330 --> 00:05:31.690
that's where the proto
property is pointing.

80
00:05:31.690 --> 00:05:34.210
So all my objects are going to point here.

81
00:05:34.210 --> 00:05:39.620
If I call my Greetr when it's ready,
and this returns an object,

82
00:05:41.000 --> 00:05:46.078
then It'll return an object by
calling this function constructor.

83
00:05:46.078 --> 00:05:50.090
So the .prototype
property of this function

84
00:05:50.090 --> 00:05:54.920
is where that new object
will point as its proto.

85
00:05:56.020 --> 00:05:56.800
Remember all that?

86
00:05:56.800 --> 00:05:59.150
Go back and look at that,
if you need to again.

87
00:05:59.150 --> 00:06:02.810
Can be a little confusing just
because it's called prototype.

88
00:06:02.810 --> 00:06:06.050
But it really is just where objects
that are being created are pointing at.

89
00:06:07.560 --> 00:06:13.483
And I want this to be the prototype
of all objects created from this.

90
00:06:13.483 --> 00:06:15.230
So a jQuery did was this.

91
00:06:17.914 --> 00:06:19.457
Remember?

92
00:06:19.457 --> 00:06:23.867
It just says any objects created
with this function should

93
00:06:23.867 --> 00:06:27.380
actually point here for
its prototype chain.

94
00:06:27.380 --> 00:06:28.091
Got it?

95
00:06:28.091 --> 00:06:32.358
So now I can cleanly put my properties and
methods on here.

96
00:06:32.358 --> 00:06:35.897
It just looks a little better.

97
00:06:35.897 --> 00:06:40.595
All right now I want to expose
my Greetr to the outside world.

98
00:06:40.595 --> 00:06:46.720
I want to attach it to my global object so
that I can call this function anywhere.

99
00:06:46.720 --> 00:06:48.170
Because it's sitting on the global object.

100
00:06:49.790 --> 00:06:52.760
We're not gonna worry about checking
to see whether it exists or not.

101
00:06:54.020 --> 00:06:57.590
We're just going to attach
it to the global object.

102
00:06:57.590 --> 00:07:00.640
And oh, we also want that nice alias, G$,

103
00:07:00.640 --> 00:07:04.780
so I don't have to type Greetr
all the time when I'm using this.

104
00:07:04.780 --> 00:07:06.210
How do we do that?

105
00:07:06.210 --> 00:07:08.860
How do we add it to the global object?

106
00:07:08.860 --> 00:07:14.104
Try it yourself, and
then alias it with G$.

107
00:07:14.104 --> 00:07:16.840
How do we do that?

108
00:07:16.840 --> 00:07:19.930
Well, to make something available
everywhere I need to attach it to

109
00:07:19.930 --> 00:07:20.840
the global object.

110
00:07:20.840 --> 00:07:25.500
I passed it in to this function
that's being invoked..

111
00:07:25.500 --> 00:07:28.380
So it's called global
cuz I passed in window.

112
00:07:28.380 --> 00:07:32.646
And I don't want my code inside of here
to think about whether it's a window or

113
00:07:32.646 --> 00:07:34.890
not so we're just gonna call it global.

114
00:07:34.890 --> 00:07:39.190
And maybe someday I could enhance
this call to check whether window or

115
00:07:39.190 --> 00:07:40.060
not exists.

116
00:07:41.120 --> 00:07:48.820
All right so global.Greetr because global
is what I passed into this function.

117
00:07:50.150 --> 00:07:56.050
And, I also want an alias, global.G$,

118
00:07:56.050 --> 00:08:00.480
and I am going to set that equal to what?

119
00:08:00.480 --> 00:08:04.450
I'm exposing the Greetr function, so

120
00:08:04.450 --> 00:08:09.210
it's just Greetr, this Greetr right here,
which is a function.

121
00:08:10.310 --> 00:08:15.040
So, on the global object,
these two names will point to this value.

122
00:08:16.850 --> 00:08:17.350
Got it?

123
00:08:18.850 --> 00:08:22.680
So I have the basic setup of my object and
my prototype.

124
00:08:24.560 --> 00:08:29.252
So if I go to my app,
I can already say var,

125
00:08:29.252 --> 00:08:33.411
let's just say g = G$('John',

126
00:08:33.411 --> 00:08:38.934
'Doe'), and I'm not gonna pass a language.

127
00:08:38.934 --> 00:08:44.847
And let's console.log(g).

128
00:08:44.847 --> 00:08:46.409
And let's refresh.

129
00:08:47.610 --> 00:08:48.140
Hey, look.

130
00:08:49.380 --> 00:08:54.033
I have an object with firstName John,
lastName, Doe,

131
00:08:54.033 --> 00:08:59.973
default language, and its of type
Greetr.init, which makes sense,

132
00:08:59.973 --> 00:09:05.324
because just like jQuery,
I'm returning a new Greetr.init.

133
00:09:06.520 --> 00:09:09.780
But its prototype is pointing here so
I can add my other methods and

134
00:09:09.780 --> 00:09:11.130
properties right here.

135
00:09:12.590 --> 00:09:13.090
Got that.

136
00:09:14.260 --> 00:09:15.990
We're well on our way.

137
00:09:15.990 --> 00:09:17.090
Let's add some functionality.

