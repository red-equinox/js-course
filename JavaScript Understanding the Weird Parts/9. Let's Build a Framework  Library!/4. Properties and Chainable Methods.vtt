WEBVTT

1
00:00:02.444 --> 00:00:05.382
All right, so
let's add some functionality.

2
00:00:05.382 --> 00:00:08.427
Let's add some properties, and

3
00:00:08.427 --> 00:00:13.984
some chainable methods to our object,
because I like that.

4
00:00:13.984 --> 00:00:18.746
And we'll also set up some setup
features that are within the greeter but

5
00:00:18.746 --> 00:00:21.020
not exposed to the outside world.

6
00:00:22.360 --> 00:00:26.430
So I've already set up my object in
here where I'm building my object and

7
00:00:26.430 --> 00:00:31.940
my function constructor, the one that I'll
actually be using out in my app.js file.

8
00:00:32.960 --> 00:00:38.710
I've already built this up with the
properties that are unique to each copy or

9
00:00:38.710 --> 00:00:40.926
each instance of the object.

10
00:00:40.926 --> 00:00:46.072
So, in order to save memory space,
where should I put any methods and

11
00:00:46.072 --> 00:00:51.770
other properties that would be shared
by all of the objects generated here?

12
00:00:51.770 --> 00:00:54.370
Where should I put it?

13
00:00:54.370 --> 00:00:58.060
I could put self dot and add methods here,
but it's better to put it where?

14
00:00:59.210 --> 00:01:04.410
On the prototype, which, thanks to
this line of code will be this object.

15
00:01:05.540 --> 00:01:06.770
All right?

16
00:01:06.770 --> 00:01:11.175
And what about things that I want
to use in the logic of this entire

17
00:01:11.175 --> 00:01:17.290
framework/library, but I don't want it to
be exposed to the outside world at all?

18
00:01:17.290 --> 00:01:21.760
Can I create variables and
concepts that aren't

19
00:01:21.760 --> 00:01:26.030
part of the object that gets
returned when we use the greeter?

20
00:01:27.360 --> 00:01:28.850
Yes.

21
00:01:28.850 --> 00:01:35.370
I could put, for example, a variable here,
let's say supported languages.

22
00:01:35.370 --> 00:01:38.500
I'll make it an array, and
we're gonna support English and Spanish.

23
00:01:40.410 --> 00:01:42.830
This is never exposed anywhere.

24
00:01:42.830 --> 00:01:43.950
Right?
It's not a property,

25
00:01:43.950 --> 00:01:46.510
it's not a method of
the object being returned.

26
00:01:46.510 --> 00:01:48.820
It's inside this memory
space of this function.

27
00:01:50.570 --> 00:01:55.290
However, I can use it inside my object,
because of what?

28
00:01:55.290 --> 00:02:00.730
Why is it that the object that's returned,
well then any methods

29
00:02:00.730 --> 00:02:05.880
on that object created here would
have access to this variable.

30
00:02:05.880 --> 00:02:09.500
Why would any objects created here
have access to this variable?

31
00:02:10.570 --> 00:02:14.750
Because this object's lexical
environment is this whole function.

32
00:02:14.750 --> 00:02:19.700
And so thanks to closures
it'll close in this variable

33
00:02:19.700 --> 00:02:22.570
even when this immediately
invoked function is done running.

34
00:02:23.600 --> 00:02:28.020
So it will have access to these variables.

35
00:02:28.020 --> 00:02:30.720
But they're hidden to
many other developers

36
00:02:30.720 --> 00:02:33.570
from changing them without coming
into the source code itself.

37
00:02:34.570 --> 00:02:40.830
All right, so let's say I also wanna
set up any other data that I want

38
00:02:40.830 --> 00:02:45.290
that I don't want developers to be able
to change but I do need access to.

39
00:02:45.290 --> 00:02:50.930
I want to set up greetings and
then we'll also set up formal greetings.

40
00:02:51.990 --> 00:02:56.800
I could make these arrays, but I really
would like to reference the greeting

41
00:02:56.800 --> 00:03:01.590
by the name of the language,
by the string, the name of the language.

42
00:03:01.590 --> 00:03:04.900
Do you remember how we
can do that with objects?

43
00:03:04.900 --> 00:03:07.820
How can we reference an object's
property with a string?

44
00:03:09.510 --> 00:03:13.210
That's right, with the brackets.

45
00:03:13.210 --> 00:03:17.920
So I could put English in here and
if there is a .en property it'll find it.

46
00:03:18.920 --> 00:03:23.210
So I can use that and
I'm gonna set up my greetings here,

47
00:03:23.210 --> 00:03:26.520
hello, and a Spanish one, hola.

48
00:03:28.180 --> 00:03:32.420
And then I'll set up a formal greeting,
the same property name so

49
00:03:32.420 --> 00:03:34.960
I can reference it by language.

50
00:03:34.960 --> 00:03:41.890
Greetings, more formal, and saludos,
also more formal in Spanish.

51
00:03:41.890 --> 00:03:42.390
Got that?

52
00:03:43.830 --> 00:03:49.730
So now I have a nice list of greetings and
I'm making sure that others outside this

53
00:03:49.730 --> 00:03:56.670
greeter framework/library can't just go
like greeter.greetings, and change these.

54
00:03:56.670 --> 00:04:00.063
I'll have to expose it for them,
if that's really what they want.

55
00:04:00.063 --> 00:04:02.522
Make sense?

56
00:04:02.522 --> 00:04:04.434
All right.

57
00:04:04.434 --> 00:04:09.360
So, I have my languages.

58
00:04:09.360 --> 00:04:13.220
I have my greetings,
I have my formal greetings and

59
00:04:13.220 --> 00:04:15.950
I'm just gonna put semicolons here.

60
00:04:15.950 --> 00:04:23.010
So it's clear that this is just declaring
and creating these brand new things.

61
00:04:23.010 --> 00:04:26.615
And I need my var to show that.

62
00:04:26.615 --> 00:04:28.427
Make sense?

63
00:04:30.772 --> 00:04:34.354
All right, let's move on.

64
00:04:34.354 --> 00:04:37.360
One other thing.

65
00:04:37.360 --> 00:04:40.436
Just because I'm a good developer,

66
00:04:40.436 --> 00:04:46.497
I wanna add an option to log whenever
those greetings get used or called.

67
00:04:46.497 --> 00:04:49.889
Maybe be logged to a database in our case
we'll just log it to the console that

68
00:04:49.889 --> 00:04:51.340
it got used.

69
00:04:51.340 --> 00:04:55.340
So if I want to log it to the console
I need some messages for that.

70
00:04:55.340 --> 00:05:00.580
So I'll just create log messages and

71
00:05:00.580 --> 00:05:05.280
same thing, maybe it'll be logged in,
will be the message.

72
00:05:05.280 --> 00:05:10.320
And in Spanish,
in case I want Spanish logged messages,

73
00:05:10.320 --> 00:05:13.158
I'll just use this right here.

74
00:05:13.158 --> 00:05:15.306
Inicio session.

75
00:05:15.306 --> 00:05:17.024
That means logged in.

76
00:05:17.024 --> 00:05:18.683
Got it?

77
00:05:18.683 --> 00:05:22.430
All right, so I have three sets
of messages, but they're objects,

78
00:05:22.430 --> 00:05:26.740
not arrays, because I want to
reference them by the name/value pair,

79
00:05:26.740 --> 00:05:29.420
by the name of the property.

80
00:05:29.420 --> 00:05:31.610
And this will let me do this
dynamically very easily.

81
00:05:32.940 --> 00:05:38.350
So, that's some things
that are not exposed to

82
00:05:38.350 --> 00:05:43.800
the outside world until
I desire it to do so.

83
00:05:45.680 --> 00:05:46.439
Interesting, right?

84
00:05:47.610 --> 00:05:52.260
Okay, so now that I have these
values that are hidden from being

85
00:05:52.260 --> 00:05:57.719
accidentally changed, greetings,
formal greetings, log messages.

86
00:05:57.719 --> 00:06:02.792
Let's add some things that will be
exposed inside this prototype object.

87
00:06:02.792 --> 00:06:09.479
So that any objects built here will have
access to any methods and properties here.

88
00:06:09.479 --> 00:06:15.650
And any methods in here that this variable
will point to the object that was created.

89
00:06:15.650 --> 00:06:16.270
Remember all that?

90
00:06:17.710 --> 00:06:22.320
So I need a fullName property because
I have a first name and last name.

91
00:06:22.320 --> 00:06:23.530
We've built this plenty of times.

92
00:06:23.530 --> 00:06:26.960
It's a very simply one,
not very smart one, but that's okay.

93
00:06:28.290 --> 00:06:34.400
This will just return firstName and
lastName.

94
00:06:34.400 --> 00:06:39.850
I'm using object literal syntax to
create a method called fullName with

95
00:06:39.850 --> 00:06:42.390
this function expression to define it.

96
00:06:42.390 --> 00:06:47.210
Then a comma, right,
because I'm adding properties and

97
00:06:47.210 --> 00:06:49.250
methods in object literal syntax.

98
00:06:49.250 --> 00:06:50.550
So I separate them with a comma.

99
00:06:52.130 --> 00:06:53.770
What else might I need?

100
00:06:53.770 --> 00:06:56.940
I'd like to be able to validate that
it's a language that's supported.

101
00:06:56.940 --> 00:07:01.020
So if the developer tries to call this and
pass German or French or

102
00:07:01.020 --> 00:07:05.860
something, I can tell them that
it doesn't support this language.

103
00:07:07.290 --> 00:07:12.780
I set up a hidden variable here that'll
be hidden to the outside world but

104
00:07:12.780 --> 00:07:16.700
accessible via the closure
called supported languages.

105
00:07:16.700 --> 00:07:21.810
So JavaScript will make sure that
when this function is called

106
00:07:21.810 --> 00:07:24.880
because of where it sits lexically,
it will go up the scope chain and

107
00:07:24.880 --> 00:07:28.060
find supported languages
where it's sitting in memory.

108
00:07:28.060 --> 00:07:30.280
So this is an array.

109
00:07:30.280 --> 00:07:34.610
I can use indexOf which
just tells me whether

110
00:07:36.310 --> 00:07:40.570
It's found in the array and
I'm gonna use this.language.

111
00:07:40.570 --> 00:07:42.340
Remember this, the keyword this,

112
00:07:42.340 --> 00:07:46.670
will point to the object
that's calling this function.

113
00:07:46.670 --> 00:07:50.850
And the object will store its own
language that we're requesting.

114
00:07:50.850 --> 00:07:53.090
And I'm gonna see if it's found or not.

115
00:07:54.970 --> 00:07:57.730
If it's not found,
I'm gonna throw a new error.

116
00:07:57.730 --> 00:08:01.879
And this is a simple way to throw an error
in JavaScript, if you didn't know this.

117
00:08:01.879 --> 00:08:06.113
All right, so
it's just a validate function, just so

118
00:08:06.113 --> 00:08:11.925
I can throw an error if we're asking for
a language that isn't supported.

119
00:08:11.925 --> 00:08:14.200
Make sense?

120
00:08:14.200 --> 00:08:17.510
Oh actually there's a syntax error here,
it should say if.

121
00:08:17.510 --> 00:08:19.110
Here we go.

122
00:08:19.110 --> 00:08:20.340
Did you catch that?

123
00:08:20.340 --> 00:08:26.090
All right so if and indexOf returns
a negative one if it's not found.

124
00:08:26.090 --> 00:08:28.716
Otherwise it'll return a zero or a one.

125
00:08:30.516 --> 00:08:33.035
All right so, validate.

126
00:08:33.035 --> 00:08:36.472
So that works just fine and
I have another comma.

127
00:08:36.472 --> 00:08:38.204
So I'm just adding more methods.

128
00:08:38.204 --> 00:08:41.820
I'm adding functionality to my objects.

129
00:08:41.820 --> 00:08:46.410
You'll have access to all of these so
I'm just gonna go ahead and add some.

130
00:08:46.410 --> 00:08:49.560
Let's say I want to have
a regular greeting.

131
00:08:50.700 --> 00:08:54.740
So now I have the first name and last
name of the person I want to go out and

132
00:08:54.740 --> 00:08:58.499
grab the greetings based on
the language that was chosen.

133
00:08:59.866 --> 00:09:04.870
So greetings and then I'll use
brackets operator to get the property,

134
00:09:04.870 --> 00:09:08.150
and the property I've
named after the language.

135
00:09:08.150 --> 00:09:13.802
So this.language, whatever is set
up as the language in the object.

136
00:09:13.802 --> 00:09:18.790
I'll go get that equivalent property name,
do a space and

137
00:09:18.790 --> 00:09:22.990
then the first name of the person,
maybe an exclamation mark or

138
00:09:22.990 --> 00:09:26.420
something like that, cuz this is informal.

139
00:09:26.420 --> 00:09:31.787
And a formalGreeting,
let's just do a function.

140
00:09:34.087 --> 00:09:41.520
And I have formalGreetings as
another object with properties.

141
00:09:41.520 --> 00:09:46.060
And I can grab that property by name,
using the chosen language.

142
00:09:46.060 --> 00:09:49.250
So it will go out and
get the appropriate language.

143
00:09:49.250 --> 00:09:51.270
I'll do a comma and

144
00:09:51.270 --> 00:09:56.210
this dot, actually I want full name
in this case, because it's formal.

145
00:09:56.210 --> 00:09:57.020
So let's do fullName.

146
00:09:57.020 --> 00:10:00.730
All right, so

147
00:10:00.730 --> 00:10:06.860
now I want some methods that I
can really use and be chainable.

148
00:10:06.860 --> 00:10:09.360
Remember we saw chainable
methods in jQuery?

149
00:10:09.360 --> 00:10:11.340
For example, I don't want to
always have to call greeting or

150
00:10:11.340 --> 00:10:15.070
formal greeting that just
encapsulated that code, separately.

151
00:10:15.070 --> 00:10:18.960
I'll just have a greet method,
which is the one I'll probably

152
00:10:18.960 --> 00:10:23.910
be really using as a developer, and
I'll pass whether or not I want it formal.

153
00:10:23.910 --> 00:10:26.630
All right, I've already written this up,

154
00:10:26.630 --> 00:10:31.470
so I'm just going to
type it out real quick.

155
00:10:31.470 --> 00:10:32.930
I'm going to have a message.

156
00:10:34.230 --> 00:10:39.410
And then, I'm also gonna log when this
happens because I just wanna use this and

157
00:10:39.410 --> 00:10:41.630
show how it's used.

158
00:10:41.630 --> 00:10:44.740
So I'll log the greeting to the console.

159
00:10:44.740 --> 00:10:47.880
So I can do .greet and
log into the console that way.

160
00:10:47.880 --> 00:10:51.450
All right, so I have this message.

161
00:10:51.450 --> 00:10:54.930
If it's formal then it's
the result of formal greeting.

162
00:10:54.930 --> 00:10:57.540
If it's not, it's the result of greeting.

163
00:10:57.540 --> 00:11:00.710
These are just returning strings,
and I'll put it to the console.

164
00:11:00.710 --> 00:11:05.360
And then I'll make it
chainable by returning this.

165
00:11:06.390 --> 00:11:07.240
See that?

166
00:11:07.240 --> 00:11:08.984
So .greet, whether or

167
00:11:08.984 --> 00:11:14.138
not I want it formal will log
the appropriate greeting to the console.

168
00:11:14.138 --> 00:11:21.876
And then I'm also going
to write a log function.

169
00:11:21.876 --> 00:11:27.290
This is when I want to manually
make sure that something is logged.

170
00:11:27.290 --> 00:11:30.450
I'll log it to the console,
Internet Explorer

171
00:11:30.450 --> 00:11:35.220
actually doesn't have a console
variable unless its console is open.

172
00:11:35.220 --> 00:11:39.270
So I'm going to make sure that
it is by just saying if console.

173
00:11:39.270 --> 00:11:40.040
That's an object.

174
00:11:40.040 --> 00:11:43.100
If it's undefined,
it will be coerced to false.

175
00:11:43.100 --> 00:11:48.100
So as long as I have a console
object available, I'll console.log.

176
00:11:48.100 --> 00:11:56.290
And then I'm just going to say something
according to this logMessages.

177
00:11:56.290 --> 00:11:59.911
So very similar to what I've done before,

178
00:11:59.911 --> 00:12:07.369
I'll do logMessages[this.language] +
that would be a colon and this.fullName.

179
00:12:07.369 --> 00:12:14.440
So whoever it was that was used, it will
log to the console that log message.

180
00:12:14.440 --> 00:12:18.899
So this is just a greeting, and
this I'm using for logging, and

181
00:12:18.899 --> 00:12:22.350
let's see,
what other functionality can I do?

182
00:12:22.350 --> 00:12:25.150
Well, let's make this chainable as well.

183
00:12:25.150 --> 00:12:29.560
So I'll return this at
the end of this function.

184
00:12:29.560 --> 00:12:32.770
So both of these are chainable,
meaning I can call the object and

185
00:12:32.770 --> 00:12:35.340
then the method and
then dot another method.

186
00:12:36.900 --> 00:12:39.240
What if I want to change
the language on the fly?

187
00:12:40.470 --> 00:12:45.170
Could you write a setLang method that
changes the language on the fly?

188
00:12:46.310 --> 00:12:47.560
And make that a chainable method?

189
00:12:47.560 --> 00:12:51.460
So I could call .greet in English,
then set the language to Spanish and

190
00:12:51.460 --> 00:12:53.680
then call .greet again all in one line.

191
00:12:56.510 --> 00:12:57.685
Let's do function.

192
00:12:57.685 --> 00:13:02.430
It'll take the new language that I want.

193
00:13:02.430 --> 00:13:07.540
And I'll validate this after I

194
00:13:07.540 --> 00:13:12.810
set this.language equal to that
language that got passed in.

195
00:13:12.810 --> 00:13:18.256
So, update my object and then, call
validate to make sure that it's valid.

196
00:13:18.256 --> 00:13:24.242
And then, return this.

197
00:13:25.300 --> 00:13:25.920
Make sense?

198
00:13:27.710 --> 00:13:32.782
So I'm just creating properties and

199
00:13:32.782 --> 00:13:38.430
methods along the way and
each one of these is returning

200
00:13:38.430 --> 00:13:42.800
the this variable so
that they're chainable.

201
00:13:44.480 --> 00:13:45.270
All right.

202
00:13:45.270 --> 00:13:47.060
Let's try using this.

203
00:13:47.060 --> 00:13:49.920
I'm just gonna double-check
my syntax because my editor's

204
00:13:49.920 --> 00:13:51.990
been acting a little strange.

205
00:13:51.990 --> 00:13:54.710
I'd suggest that somewhere
something's wrong.

206
00:13:54.710 --> 00:13:58.170
Oh, look.
See that console.log?

207
00:13:58.170 --> 00:14:00.400
I don't have an ending parenthesis,

208
00:14:00.400 --> 00:14:03.880
that's why it was acting strange,
it was getting confused.

209
00:14:03.880 --> 00:14:06.840
All right.
So I have all of these properties,

210
00:14:06.840 --> 00:14:10.810
all of these methods,
inside a single object literal.

211
00:14:10.810 --> 00:14:14.750
And that object literal ends right there.

212
00:14:14.750 --> 00:14:16.711
See that?

213
00:14:16.711 --> 00:14:22.541
One giant object literal
that's the prototype

214
00:14:22.541 --> 00:14:27.220
of all of these methods defined on it.

215
00:14:27.220 --> 00:14:29.088
So now let's use our object with all of
its properties available on the prototype.

216
00:14:29.088 --> 00:14:36.220
I've got my object returned, right?

217
00:14:36.220 --> 00:14:42.920
So g$ points to the greeter function,
which is up here.

218
00:14:44.100 --> 00:14:50.323
The greeter function returns
a new greeter.init down here,

219
00:14:50.323 --> 00:14:54.180
which builds the object, sets the values.

220
00:14:54.180 --> 00:14:58.280
This prototype makes sure that all of
those objects created from here has access

221
00:14:58.280 --> 00:15:02.580
to all of these methods on
this prototype property.

222
00:15:04.160 --> 00:15:04.660
Got that?

223
00:15:05.670 --> 00:15:10.721
So I should be able to do
something like g.greet and

224
00:15:10.721 --> 00:15:18.350
what g.greet should do is it should
decide whether I passed formal or not.

225
00:15:18.350 --> 00:15:20.980
And i just used coercion
to see if I passed it.

226
00:15:22.100 --> 00:15:25.910
And if I did it'll give me
a formal greeting and if I didn't,

227
00:15:25.910 --> 00:15:30.230
it'll give me a regular greeting and
I made it chainable by returning this,

228
00:15:30.230 --> 00:15:34.290
or returning the object that's
actually calling the method.

229
00:15:34.290 --> 00:15:35.320
So, let's see if this works.

230
00:15:36.798 --> 00:15:38.289
Hello John!

231
00:15:40.553 --> 00:15:45.161
And that's chainable so I could call
greet again right away if I wanted to and

232
00:15:45.161 --> 00:15:45.810
say true.

233
00:15:47.420 --> 00:15:52.490
And that's being passed to that
formal parameter which will then

234
00:15:52.490 --> 00:15:57.477
get me a formal greeting and
pass that or log that to the console.

235
00:15:57.477 --> 00:16:02.740
So what I should see is this
function's calll returns this,

236
00:16:02.740 --> 00:16:07.586
which is the g object and
calls it again on the g object and

237
00:16:07.586 --> 00:16:12.045
there I have, my greeting and
my formal greeting.

238
00:16:12.045 --> 00:16:17.078
And then since I've changed
the language swap I can

239
00:16:17.078 --> 00:16:22.590
stick in between there setLang,
change it to Spanish.

240
00:16:28.150 --> 00:16:28.680
There we go.

241
00:16:28.680 --> 00:16:31.850
What do you think?

242
00:16:31.850 --> 00:16:36.140
If I had set something that wasn't valid,
that validate should throw an error.

243
00:16:36.140 --> 00:16:39.120
So if I tried French it's not supported.

244
00:16:39.120 --> 00:16:39.689
There it is.

245
00:16:41.700 --> 00:16:46.260
So I have chainable methods and an object

246
00:16:46.260 --> 00:16:50.670
that I created without having to call
the new operator using the jQuery syntax.

247
00:16:51.970 --> 00:16:53.490
Take a look at this code.

248
00:16:53.490 --> 00:16:55.130
Try it for yourself.

249
00:16:55.130 --> 00:16:56.110
Try doing some things.

250
00:16:57.500 --> 00:16:58.000
Let's move on.

