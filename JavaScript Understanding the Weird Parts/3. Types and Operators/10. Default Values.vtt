WEBVTT

1
00:00:02.290 --> 00:00:07.800
Let's bring together some of what we
learned about operators with coercion and

2
00:00:07.800 --> 00:00:13.710
look at another way that these
concepts can be used to our advantage

3
00:00:13.710 --> 00:00:15.240
in a pattern that's commonly used,

4
00:00:15.240 --> 00:00:19.340
again, in many libraries, frameworks,
and other good JavaScript code.

5
00:00:20.790 --> 00:00:23.310
I again have a blank app.js file, and

6
00:00:23.310 --> 00:00:26.790
I'm gonna create a new simple
function called greet.

7
00:00:26.790 --> 00:00:30.100
And it's going to take
a name as a parameter.

8
00:00:31.400 --> 00:00:37.674
And what it's going to do
is simply say console.log(

9
00:00:37.674 --> 00:00:45.320
'Hello' + name), and
then I'm going to call greet.

10
00:00:45.320 --> 00:00:47.620
And I'll pass my name, Tony.

11
00:00:49.360 --> 00:00:50.934
All right.
Let's run this.

12
00:00:50.934 --> 00:00:54.238
And it says, Hello Tony.

13
00:00:54.238 --> 00:00:56.880
Pretty simple.

14
00:00:56.880 --> 00:00:59.960
But what if I called greet
without a parameter?

15
00:01:01.420 --> 00:01:06.150
Unlike many programming languages,
JavaScript doesn't care.

16
00:01:07.260 --> 00:01:08.360
This won't throw an error.

17
00:01:09.390 --> 00:01:13.970
It will simply pass nothing to name.

18
00:01:13.970 --> 00:01:19.780
So, if I console.log name, and
then this, let's see what happens.

19
00:01:21.690 --> 00:01:22.890
Look.

20
00:01:22.890 --> 00:01:24.620
Kind of as we expected, right?

21
00:01:24.620 --> 00:01:25.820
Undefined.

22
00:01:25.820 --> 00:01:28.970
Because what happens when
the function is invoked?

23
00:01:28.970 --> 00:01:33.200
A new execution context is created,
and this variable,

24
00:01:33.200 --> 00:01:38.110
which is essentially created inside the
function though the value is passed during

25
00:01:38.110 --> 00:01:43.330
its invocation, is initially set when
the memory space is set up to undefined.

26
00:01:43.330 --> 00:01:48.300
So JavaScript simply
ignores the fact that I'd

27
00:01:48.300 --> 00:01:53.270
called the function without the expected
parameters and simply says, that's okay.

28
00:01:54.620 --> 00:01:55.560
It's undefined.

29
00:01:55.560 --> 00:01:56.360
It's already in memory.

30
00:01:56.360 --> 00:01:59.330
It has a value, and
you simply didn't give me a new one.

31
00:01:59.330 --> 00:02:03.130
And then that Hello,
well look what happened there.

32
00:02:03.130 --> 00:02:03.760
That's a problem.

33
00:02:03.760 --> 00:02:08.020
You see, the plus operator,

34
00:02:08.020 --> 00:02:13.570
when it saw a string and undefined,
that's the value and name.

35
00:02:13.570 --> 00:02:17.910
It coerced name,
the undefined primitive type,

36
00:02:17.910 --> 00:02:22.860
to a string, and so it literally
coerced it to the string undefined.

37
00:02:22.860 --> 00:02:25.600
And then put them together,
concatenated them.

38
00:02:26.690 --> 00:02:31.800
That is not ideal behavior, but
it isn't totally unexpected

39
00:02:31.800 --> 00:02:37.600
behavior in that we now understand
how operators and coercion works.

40
00:02:37.600 --> 00:02:39.240
But, what should we do?

41
00:02:39.240 --> 00:02:44.260
What if I want a default value for
this parameter?

42
00:02:44.260 --> 00:02:49.070
Well, the next version of JavaScript ES
6 is actually going to introduce syntax

43
00:02:49.070 --> 00:02:51.070
to set the default value.

44
00:02:51.070 --> 00:02:56.610
But if you look at current JavaScript
code, in a lot of legacy code inside a lot

45
00:02:56.610 --> 00:03:01.550
of software, you'll see a neat trick for
setting a default value.

46
00:03:02.790 --> 00:03:07.030
So, I can say that name equals name,

47
00:03:07.030 --> 00:03:11.970
or, and
then I'll put let's say your name here.

48
00:03:13.400 --> 00:03:14.830
Let's say that's my default value.

49
00:03:16.400 --> 00:03:20.790
So, what's going to happen if nothing,

50
00:03:20.790 --> 00:03:25.950
if undefined, ends up being the value
of name when the function is called?

51
00:03:25.950 --> 00:03:30.130
Well remember that operators are just
functions that return values.

52
00:03:31.130 --> 00:03:32.410
So what does the or

53
00:03:32.410 --> 00:03:38.140
operator in JavaScript return when
you pass different parameters to it?

54
00:03:38.140 --> 00:03:41.430
It actually does something kind of neat.

55
00:03:41.430 --> 00:03:44.460
It doesn't just return true or false.

56
00:03:45.650 --> 00:03:46.280
Let's take a look.

57
00:03:46.280 --> 00:03:54.620
If I clear this,
what if I tried true or false?

58
00:03:54.620 --> 00:03:56.283
Well it returns true.

59
00:03:56.283 --> 00:03:58.510
That makes sense.

60
00:03:58.510 --> 00:04:06.104
If I returned undefined or hello,
it doesn't return true or false.

61
00:04:06.104 --> 00:04:08.735
It returns hello.

62
00:04:08.735 --> 00:04:16.275
It returns, in this case,
the value that can be coerced to true.

63
00:04:16.275 --> 00:04:21.645
Because if I coerce hello,
a nonempty string, it's true.

64
00:04:21.645 --> 00:04:25.255
So that's what the or method returns.

65
00:04:26.575 --> 00:04:32.990
If I put hi and hello, it gives me hi
because it will just return the first one.

66
00:04:32.990 --> 00:04:35.310
That coerced to true.

67
00:04:36.490 --> 00:04:39.860
So, the or operator's special behavior,

68
00:04:39.860 --> 00:04:45.330
in that if you pass to it two values
that can be coerced to true and

69
00:04:45.330 --> 00:04:51.070
false, it will return the first
one that coerces to true.

70
00:04:51.070 --> 00:04:53.400
One can be converted to true,

71
00:04:53.400 --> 00:04:55.980
zero converts to false when
converting to Boolean.

72
00:04:57.220 --> 00:05:03.735
So I can use the or to say,
if something does not exist or

73
00:05:03.735 --> 00:05:10.105
is an empty string or is a null,
give me this back instead.

74
00:05:10.105 --> 00:05:12.005
Null or hello.

75
00:05:13.815 --> 00:05:15.695
Empty string or hello.

76
00:05:17.620 --> 00:05:18.420
See how that works?

77
00:05:19.530 --> 00:05:22.880
Operators are functions
that return values.

78
00:05:22.880 --> 00:05:27.570
That's why I can use this line of code and
say, well,

79
00:05:27.570 --> 00:05:33.880
name is equal to name, the value that I
currently have, or some default value.

80
00:05:33.880 --> 00:05:40.199
And what will happen,
if name is undefined, or empty string,

81
00:05:40.199 --> 00:05:45.205
or null, then this or
function, this operator,

82
00:05:45.205 --> 00:05:50.480
returns the default value
to this equals operator.

83
00:05:50.480 --> 00:05:53.010
So what will happen is, or

84
00:05:53.010 --> 00:05:58.450
will be run before equals because
if I look at my precedents,

85
00:05:58.450 --> 00:06:03.980
the Assignment operator equals
has a lower precedence than or.

86
00:06:03.980 --> 00:06:06.330
So or is run first.

87
00:06:07.650 --> 00:06:09.140
So or is run.

88
00:06:10.350 --> 00:06:12.238
If this is undefined I'm going to
end up returning this value, and

89
00:06:12.238 --> 00:06:12.920
then the equals is run.

90
00:06:16.640 --> 00:06:17.404
So, let me call greet twice.

91
00:06:17.404 --> 00:06:23.560
Greet ('Tony'), and
then greet, no parameter.

92
00:06:25.060 --> 00:06:30.410
When Tony is passed, this will be true,
because it's not an empty string or

93
00:06:30.410 --> 00:06:33.760
undefined, so
the string Tony will coerce to true.

94
00:06:33.760 --> 00:06:37.680
And that's what will be
returned from this or.

95
00:06:37.680 --> 00:06:41.350
So name will still be set equal to Tony,
just set equal to Tony again.

96
00:06:42.820 --> 00:06:44.920
And the second time, this is undefined.

97
00:06:44.920 --> 00:06:49.500
So the or operator overturned this value,
which will be set equal to name.

98
00:06:50.820 --> 00:06:52.030
So what would I expect to see?

99
00:06:53.570 --> 00:06:54.989
Hello Tony, and then what?

100
00:06:56.430 --> 00:06:57.230
In the second call.

101
00:06:58.680 --> 00:06:59.180
Let's look.

102
00:07:01.230 --> 00:07:01.980
That's right.

103
00:07:01.980 --> 00:07:06.130
Hello Tony and then Hello
the default value, Your name here.

104
00:07:07.580 --> 00:07:13.480
So I used this one line or
expression to set a default value.

105
00:07:13.480 --> 00:07:17.790
Now, I could've done this with an if
statement, but that's a lot more typing.

106
00:07:17.790 --> 00:07:19.353
This is a pretty neat and

107
00:07:19.353 --> 00:07:24.052
clear trick that makes your code very
readable when you understand it.

108
00:07:24.052 --> 00:07:27.010
Now you still have to
be careful with zero.

109
00:07:27.010 --> 00:07:33.250
If I was to call greet and pass the number
zero that converts to false also.

110
00:07:33.250 --> 00:07:35.770
So I'd get the default value again.

111
00:07:35.770 --> 00:07:38.396
So, you do have to be
careful about zero again.

112
00:07:38.396 --> 00:07:44.030
But nonetheless, that's a side case.

113
00:07:44.030 --> 00:07:47.590
In most cases, this is just fine to do and

114
00:07:47.590 --> 00:07:51.505
is really a neat thing that
you can do in JavaScript.

