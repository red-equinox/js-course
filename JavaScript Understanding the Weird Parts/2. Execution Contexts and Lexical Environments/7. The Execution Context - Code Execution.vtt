WEBVTT

1
00:00:00.012 --> 00:00:02.850
All right.

2
00:00:02.850 --> 00:00:05.640
So remember we said there were two phases

3
00:00:05.640 --> 00:00:10.560
when it came to the execution context
within the JavaScript engine.

4
00:00:10.560 --> 00:00:14.830
The first phase was the creation phase
when it set up the variables and

5
00:00:14.830 --> 00:00:15.800
functions and memory.

6
00:00:17.040 --> 00:00:20.120
And the second phase,
is the execution phase.

7
00:00:20.120 --> 00:00:22.920
And this phase is pretty
simple to understand.

8
00:00:24.500 --> 00:00:29.500
In the execution phase we already have all
those things set up that we had before.

9
00:00:29.500 --> 00:00:34.360
And now it runs your code,
the code you've written,

10
00:00:34.360 --> 00:00:39.090
line by line, interpreting it,
converting it, compiling it,

11
00:00:39.090 --> 00:00:43.280
executing it on the computer into
something the computer can understand.

12
00:00:44.350 --> 00:00:46.450
And it runs your code line by line.

13
00:00:47.990 --> 00:00:52.146
So if I go back to our example
that we used for hoisting, and

14
00:00:52.146 --> 00:00:57.647
I console.log(a) here.

15
00:00:57.647 --> 00:01:02.300
And I'll just go ahead and
move the function to the top so

16
00:01:02.300 --> 00:01:06.270
we're using good practice,
so we don't have confusion.

17
00:01:06.270 --> 00:01:08.204
I have a function, and I call it.

18
00:01:08.204 --> 00:01:09.393
I'm logging a.

19
00:01:09.393 --> 00:01:15.850
I'm setting a equal to a value and
declaring it, and I'm logging a again.

20
00:01:17.430 --> 00:01:19.025
So, what do you think we're going to see?

21
00:01:19.025 --> 00:01:24.450
B will be called, then a will be logged,
and a will be logged again.

22
00:01:24.450 --> 00:01:28.830
We're gonna see three lines because
console.log is also called.

23
00:01:28.830 --> 00:01:30.220
So what are the three lines?

24
00:01:30.220 --> 00:01:31.110
What's the line here?

25
00:01:32.440 --> 00:01:33.580
What are we gonna see here?

26
00:01:34.950 --> 00:01:38.110
And what are we going to see here?

27
00:01:38.110 --> 00:01:40.880
All right.
Let's go ahead and run this refresh.

28
00:01:42.380 --> 00:01:43.080
Did you get it right?

29
00:01:44.080 --> 00:01:45.730
Called the function.

30
00:01:45.730 --> 00:01:50.520
The first time it called a,
it got undefined, and

31
00:01:50.520 --> 00:01:53.380
the second time it got Hello World.

32
00:01:54.510 --> 00:01:55.470
Why?

33
00:01:55.470 --> 00:01:59.820
Because now we're in the execution phase,
so in the creation

34
00:01:59.820 --> 00:02:05.080
phase we set up this function and var
a was set up and set equal to undefined.

35
00:02:05.080 --> 00:02:07.980
And now it begins to execute code.

36
00:02:07.980 --> 00:02:11.730
So, line five is executed,
and it runs that function.

37
00:02:11.730 --> 00:02:17.650
Line seven is executed, and
it outputs the value of a to the console.

38
00:02:17.650 --> 00:02:20.910
And since a was set to undefined in
the creation phase, that's what we see.

39
00:02:20.910 --> 00:02:24.240
And it executes line nine and

40
00:02:24.240 --> 00:02:28.085
sets the value in memory of
a to the string Hello World!

41
00:02:28.085 --> 00:02:33.080
And then, in line 11, it once

42
00:02:33.080 --> 00:02:38.050
again outputs the value of a in memory
to the console which is now Hello World.

43
00:02:38.050 --> 00:02:41.010
So it just executed these
things line by line.

44
00:02:41.010 --> 00:02:46.230
And we understand between these
two phases, the creation phase and

45
00:02:46.230 --> 00:02:50.900
the execution phase, now,
why we see what we see and

46
00:02:50.900 --> 00:02:53.590
why JavaScript behaves the way it does.

