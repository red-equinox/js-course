WEBVTT

1
00:00:02.270 --> 00:00:06.395
So let's move on talking
more about functions,

2
00:00:06.395 --> 00:00:11.335
context and another addition,
variable environments.

3
00:00:11.335 --> 00:00:14.900
Here's another phrase that's used when
talking about JavaScript under the hood.

4
00:00:14.900 --> 00:00:19.650
It's a lot more complicated
sounding than it really is.

5
00:00:19.650 --> 00:00:20.890
Variable environments?

6
00:00:22.580 --> 00:00:24.488
Well, big word alert.

7
00:00:27.019 --> 00:00:31.869
Variable environment is just talking
about where the variables live that

8
00:00:31.869 --> 00:00:36.770
you've created and
how they relate to each other in memory.

9
00:00:36.770 --> 00:00:40.080
So when you think about the variable
environment just think about

10
00:00:40.080 --> 00:00:41.420
where is the variable?

11
00:00:42.670 --> 00:00:43.420
Let's move on from there.

12
00:00:44.500 --> 00:00:46.920
Let's look at a piece of sample code.

13
00:00:49.690 --> 00:00:54.000
Again I have two functions,
a function B, and a function A.

14
00:00:55.330 --> 00:00:59.180
Inside function B,
I declare a variable called myVar.

15
00:00:59.180 --> 00:01:00.570
And don't set it equal to a value.

16
00:01:01.700 --> 00:01:07.420
In function A I set a variable called
myVar also and set that equal to two.

17
00:01:08.490 --> 00:01:10.550
And then outside the functions

18
00:01:12.830 --> 00:01:18.190
I also declare a variable called myVar
again, and set that equal to one.

19
00:01:18.190 --> 00:01:21.300
Then A is called and
inside A, B is called.

20
00:01:22.570 --> 00:01:24.060
So what's going to happen?

21
00:01:25.690 --> 00:01:29.710
What is the value of myVar
at any point in time?

22
00:01:31.160 --> 00:01:35.440
To answer that we need to think
again about execution context.

23
00:01:35.440 --> 00:01:41.424
What's happening as these
functions are invoked?

24
00:01:41.424 --> 00:01:48.123
So, at first what happens?

25
00:01:48.123 --> 00:01:53.042
The global execution
context is created and so

26
00:01:53.042 --> 00:01:58.290
that bottom myVar is
put into memory space.

27
00:01:58.290 --> 00:02:00.660
In the case of the global
execution context,

28
00:02:00.660 --> 00:02:05.900
it's variable environment is the global
object, or a window in a browser.

29
00:02:06.980 --> 00:02:11.870
So then the code is executed and

30
00:02:11.870 --> 00:02:17.091
that memory space will get a value of
one when it hits that myVar = 1 line.

31
00:02:17.091 --> 00:02:21.140
And then it hits the invocation of A.

32
00:02:21.140 --> 00:02:22.058
And what happens?

33
00:02:25.425 --> 00:02:28.550
A new execution context is created for A.

34
00:02:30.130 --> 00:02:34.250
And when it's created,
that myVar will be put into that

35
00:02:34.250 --> 00:02:38.290
execution context variable environment.

36
00:02:38.290 --> 00:02:44.170
See every execution context has
its own variable environment.

37
00:02:44.170 --> 00:02:49.491
And its value will then be
two during the execution

38
00:02:49.491 --> 00:02:53.684
phase when that line myVar = 2 is run.

39
00:02:53.684 --> 00:03:01.020
Then, it invokes B, and a new execution
context with its own variable environment.

40
00:03:01.020 --> 00:03:05.860
Its own memory space for
its variables is created.

41
00:03:05.860 --> 00:03:09.800
And since it's not set equal to a value,
myVar will be

42
00:03:09.800 --> 00:03:14.520
put into memory with a value of,
as you've learned before, undefined.

43
00:03:16.490 --> 00:03:18.550
This has to do with
something called scope.

44
00:03:19.600 --> 00:03:24.220
Just means where are we
able to see the variable?

45
00:03:25.480 --> 00:03:30.100
Each variable that we are looking
at is defined within its own

46
00:03:30.100 --> 00:03:34.369
execution context,
because it's within a function.

47
00:03:34.369 --> 00:03:37.800
And every time you call a function
you get your own execution context.

48
00:03:38.870 --> 00:03:42.946
So even though the myVar
Is declared three times.

49
00:03:42.946 --> 00:03:47.830
They're distinct, they're unique,
and they don't touch each other.

50
00:03:49.430 --> 00:03:50.260
All right, let's prove that.

51
00:03:52.000 --> 00:03:56.010
I've put my code into a JavaScript file,
and

52
00:03:56.010 --> 00:04:00.160
I've added some console.logs so
we can see the values.

53
00:04:00.160 --> 00:04:04.090
So we set myVar equal to one, log it.

54
00:04:04.090 --> 00:04:08.880
Then call function A,
which will create a new execution context

55
00:04:08.880 --> 00:04:13.430
on the execution stack on top
of the global execution context.

56
00:04:13.430 --> 00:04:15.577
So this will be the running code.

57
00:04:15.577 --> 00:04:22.210
It will create myVar in its own
variable environment, log it.

58
00:04:22.210 --> 00:04:26.550
And then we start another execution
context by invoking a function and it will

59
00:04:26.550 --> 00:04:32.200
put its own variable called myVar into its
variable environment and we'll log that.

60
00:04:32.200 --> 00:04:34.020
So, what should you expect to see?

61
00:04:35.270 --> 00:04:40.630
Well, we're going to expect that we'd
see this console.log happen first.

62
00:04:40.630 --> 00:04:43.770
It runs A, so we'd see this one second.

63
00:04:43.770 --> 00:04:46.890
And then it runs B, so
we'd see this one third.

64
00:04:46.890 --> 00:04:52.540
So I should see one, two, and what will
be the value if I haven't set a value?

65
00:04:52.540 --> 00:04:57.360
What value does the execution context
creation phase set all variables to?

66
00:04:58.500 --> 00:05:01.570
That's right the special value undefined.

67
00:05:01.570 --> 00:05:06.640
So I should see one, two, undefined.

68
00:05:08.400 --> 00:05:10.453
And so I'm going to go ahead and run this.

69
00:05:13.653 --> 00:05:17.428
And open up the developer tools,
go to the console and look.

70
00:05:17.428 --> 00:05:21.890
One, two, undefined.

71
00:05:21.890 --> 00:05:23.460
Exactly as we expected.

72
00:05:25.050 --> 00:05:31.310
So, each of these myVars is sitting
in its own execution context.

73
00:05:31.310 --> 00:05:34.770
Calling this function
didn't affect this myVar.

74
00:05:36.520 --> 00:05:41.460
Watch, I'll console.log
myVar after calling A.

75
00:05:41.460 --> 00:05:43.820
Should that have an impact?

76
00:05:45.070 --> 00:05:49.140
This answer is no,
because once we finish A,

77
00:05:49.140 --> 00:05:54.030
we're now the currently running code
is the global execution context.

78
00:05:54.030 --> 00:05:54.850
Where myVar is one.

79
00:05:54.850 --> 00:06:00.410
So I shouldn't see another one
when I console that log here.

80
00:06:01.560 --> 00:06:02.270
Let's say that again.

81
00:06:03.770 --> 00:06:07.780
This code is running inside
the global execution context.

82
00:06:07.780 --> 00:06:11.460
These variables are attached
to the variable environment

83
00:06:11.460 --> 00:06:14.160
of the global execution context.

84
00:06:14.160 --> 00:06:16.790
So when I log this I see a one.

85
00:06:16.790 --> 00:06:21.230
This calls, and this runs,
and that's its own

86
00:06:22.430 --> 00:06:27.100
execution context with its own
variable environment, the same with B.

87
00:06:27.100 --> 00:06:32.253
So when I leave B, A finishes.

88
00:06:32.253 --> 00:06:37.373
And when A finishes I'm back to the global
execution context because the B and

89
00:06:37.373 --> 00:06:42.160
A execution contexts have been
popped off the stack, they're gone.

90
00:06:42.160 --> 00:06:46.310
The currently running context
is the global execution context.

91
00:06:47.500 --> 00:06:50.035
And what was myVar in that context?

92
00:06:50.035 --> 00:06:54.660
One, so I'll save this,
run it, and what should I see?

93
00:06:56.940 --> 00:06:57.980
That's right.

94
00:06:57.980 --> 00:07:02.229
One, two undefined, one.

95
00:07:02.229 --> 00:07:02.955
See that?

96
00:07:02.955 --> 00:07:08.365
One, because that's inside
the global execution context.

97
00:07:08.365 --> 00:07:12.640
Two, because that's inside
A's execution context.

98
00:07:13.840 --> 00:07:17.566
Undefined, because that's
inside B's execution context.

99
00:07:17.566 --> 00:07:21.120
And then one again,

100
00:07:21.120 --> 00:07:26.010
because we're back to running inside
the global execution context.

101
00:07:26.010 --> 00:07:26.510
Got that?

102
00:07:27.520 --> 00:07:28.500
Does it make sense?

103
00:07:30.450 --> 00:07:32.840
Try this code out for yourself.

104
00:07:32.840 --> 00:07:33.770
Mess around with it a bit.

105
00:07:34.930 --> 00:07:36.230
See if you understand it.

106
00:07:38.070 --> 00:07:40.040
Remember this is important.

107
00:07:41.220 --> 00:07:45.900
And as we move on if you've got this
concept down, it will reveal another

108
00:07:45.900 --> 00:07:51.000
concept that's interesting,
fundamental and often causes confusion.

109
00:07:52.080 --> 00:07:54.120
But you are going to understand it.

110
00:07:55.540 --> 00:07:56.040
Let's move on.

