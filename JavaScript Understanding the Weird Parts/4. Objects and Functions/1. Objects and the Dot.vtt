WEBVTT

1
00:00:01.710 --> 00:00:08.090
It's time for a new section of this
course, called Objects and Functions.

2
00:00:08.090 --> 00:00:09.600
In a lot of JavaScript courses,

3
00:00:09.600 --> 00:00:15.980
they treat these two concepts as
two different subjects to teach.

4
00:00:15.980 --> 00:00:18.270
I think that's a big mistake.

5
00:00:18.270 --> 00:00:21.430
Because while in other programming
languages, objects and

6
00:00:21.430 --> 00:00:26.300
languages are two distinct things
to talk about, in JavaScript,

7
00:00:26.300 --> 00:00:29.690
they're very, very much related.

8
00:00:29.690 --> 00:00:33.070
They're really, in many ways,
the same subject.

9
00:00:33.070 --> 00:00:36.620
So let's talk about objects and functions.

10
00:00:38.050 --> 00:00:43.780
The first subject or the first topic
we'll discuss is objects and the dot.

11
00:00:45.260 --> 00:00:51.790
Remember we've already said that objects
are collections of name value pairs

12
00:00:51.790 --> 00:00:56.680
and those values can then be other
collections of name value pairs.

13
00:00:58.160 --> 00:00:59.530
But for our purposes now,

14
00:00:59.530 --> 00:01:03.050
let's look at objects from a little
bit of a different perspective.

15
00:01:04.570 --> 00:01:10.390
Let's think about how an object lives or
resides in your computer's memory.

16
00:01:11.970 --> 00:01:17.650
An object like we said is a collection
of values that are given names.

17
00:01:18.810 --> 00:01:22.170
But, what values are we talking about?

18
00:01:22.170 --> 00:01:24.780
Well, an object can have properties and
methods.

19
00:01:26.040 --> 00:01:30.690
So an object can have a primitive
sitting off of it, and

20
00:01:30.690 --> 00:01:32.480
that would be called a property.

21
00:01:32.480 --> 00:01:35.450
Remember those primitive types
that we talked about, so

22
00:01:35.450 --> 00:01:38.080
any one of those like a Boolean or
a number or a string.

23
00:01:39.290 --> 00:01:46.180
An object could have another object
connected to it as a child, so to speak.

24
00:01:46.180 --> 00:01:48.860
And this is also considered a property.

25
00:01:48.860 --> 00:01:53.050
Remember we said the value could be
another name value pair collection, or

26
00:01:53.050 --> 00:01:54.770
that is, another object.

27
00:01:56.000 --> 00:02:00.540
An object can also contain functions and

28
00:02:00.540 --> 00:02:05.790
in those cases the function is called
a method when it's sitting on the object.

29
00:02:05.790 --> 00:02:10.970
So it's still a function but
it's connected to an object.

30
00:02:10.970 --> 00:02:13.420
So it's called a method.

31
00:02:13.420 --> 00:02:17.100
So objects have properties and methods.

32
00:02:17.100 --> 00:02:21.290
And these sit in memory so

33
00:02:21.290 --> 00:02:28.440
the kind of core object will have some
sort of address in your computer's memory.

34
00:02:28.440 --> 00:02:32.496
And it will have references to
these different properties and

35
00:02:32.496 --> 00:02:36.480
methods which are also sitting
in your computer's memory.

36
00:02:36.480 --> 00:02:43.825
Now they may be related to the address of
that base object concept, or they may not.

37
00:02:43.825 --> 00:02:49.444
But either way the object has references
to the addresses or the space or

38
00:02:49.444 --> 00:02:54.420
the spots where these different
properties and methods live.

39
00:02:54.420 --> 00:02:57.440
And those addresses might
look something like that.

40
00:02:58.440 --> 00:03:01.240
So, this may seem a bit obscure.

41
00:03:01.240 --> 00:03:05.260
But it's important for things that
we're going to talk about later

42
00:03:05.260 --> 00:03:09.340
that you think about an object as
sitting in memory, and then having

43
00:03:09.340 --> 00:03:13.140
references to other things sitting
in memory that are connected to it.

44
00:03:13.140 --> 00:03:18.050
So it knows where its different
properties and methods are, that is,

45
00:03:18.050 --> 00:03:21.400
primitives, objects, and
function that make it up.

46
00:03:21.400 --> 00:03:26.152
All right, so let's look at in JavaScript

47
00:03:26.152 --> 00:03:30.244
how we access those slots in memory,

48
00:03:30.244 --> 00:03:35.398
those properties and
functions of an object.

49
00:03:35.398 --> 00:03:39.233
So I have and empty app.js file and

50
00:03:39.233 --> 00:03:45.060
I'm going to create our first object,
var person.

51
00:03:45.060 --> 00:03:50.846
And I'm going to use the syntax equals and
instead of a primitive

52
00:03:50.846 --> 00:03:55.900
like a string or a number,
I'm going to say new Object.

53
00:03:57.540 --> 00:03:59.610
Now, let me be clear.

54
00:03:59.610 --> 00:04:03.730
There are better ways to do this,
and we'll cover them shortly.

55
00:04:04.760 --> 00:04:08.810
But just for this moment,
I am going to use the new Object

56
00:04:08.810 --> 00:04:13.590
syntax to create a new Object because
it's very obvious what's going on.

57
00:04:13.590 --> 00:04:15.950
So I'm creating a new Object.

58
00:04:15.950 --> 00:04:18.120
And this is going to sit in memory.

59
00:04:19.185 --> 00:04:23.670
Now I'm going to add properties and
methods.

60
00:04:25.110 --> 00:04:28.410
So, for example, I can say person, and

61
00:04:28.410 --> 00:04:33.900
then I'm going to use what's called
the computed member access operator.

62
00:04:34.900 --> 00:04:35.970
That's right, an operator.

63
00:04:35.970 --> 00:04:37.260
An operator is this.

64
00:04:38.510 --> 00:04:40.250
Brackets.

65
00:04:40.250 --> 00:04:44.000
And inside those brackets I put the name

66
00:04:44.000 --> 00:04:46.840
of the value that I'm
trying to locate in memory.

67
00:04:46.840 --> 00:04:49.180
So let's say firstname.

68
00:04:49.180 --> 00:04:53.780
It doesn't exist yet, so
when I use the = Tony,

69
00:04:55.250 --> 00:04:59.070
it's going to create that spot in memory,
and give it that name.

70
00:04:59.070 --> 00:05:03.560
And this object will get a reference to
the address of that location in memory.

71
00:05:04.630 --> 00:05:08.600
So, it will know where
firstname is in memory and

72
00:05:08.600 --> 00:05:11.520
that's going to be a primitive, a string.

73
00:05:11.520 --> 00:05:14.870
So, it's called a property,
the firstname property.

74
00:05:14.870 --> 00:05:20.240
So, this is one way to set and
access properties.

75
00:05:20.240 --> 00:05:24.600
If I go back to my PDF of JavaScript

76
00:05:24.600 --> 00:05:29.050
operator precedence, you'll see that
we have Computed Member Access.

77
00:05:29.050 --> 00:05:30.616
It's very near the top.

78
00:05:30.616 --> 00:05:36.060
And it's left-to-right associativity,
and it's brackets there.

79
00:05:36.060 --> 00:05:37.130
So this is an operator.

80
00:05:38.130 --> 00:05:43.630
What the operator does is it
takes this Object and this

81
00:05:43.630 --> 00:05:48.360
property or method name, and
it looks for this on this Object.

82
00:05:49.670 --> 00:05:52.120
It actually can do quite
a bit more than that, but

83
00:05:52.120 --> 00:05:54.140
we'll see that much later in the course.

84
00:05:54.140 --> 00:05:58.930
But, for starters this is one way,
using a string to access this.

85
00:05:58.930 --> 00:06:01.455
So let me set lastname.

86
00:06:05.640 --> 00:06:10.710
Now the neat thing about this operator
is that I could set a string, let's

87
00:06:12.390 --> 00:06:18.880
say firstname, and
I can then use that string to access

88
00:06:18.880 --> 00:06:25.400
that property using that bracket
notation or that operator.

89
00:06:25.400 --> 00:06:29.870
So let me first of all just log
the person itself so you can see it.

90
00:06:29.870 --> 00:06:31.993
And then I'll log person.

91
00:06:31.993 --> 00:06:37.576
I'll use this bracket operator and
I'll pass this string,

92
00:06:37.576 --> 00:06:41.418
this variable that contains the string.

93
00:06:41.418 --> 00:06:45.667
And remember this operator will
take this object and look for

94
00:06:45.667 --> 00:06:48.100
a property with this name.

95
00:06:48.100 --> 00:06:52.430
So this name is firstname so it should
find it, and what should it output?

96
00:06:53.600 --> 00:06:54.175
Tony.

97
00:06:54.175 --> 00:06:58.151
So let's go ahead and
run this in the browser.

98
00:07:01.230 --> 00:07:04.690
And then I'll open my console,
and there I see Tony.

99
00:07:04.690 --> 00:07:11.260
So the Computed Member Access operator,
those brackets worked.

100
00:07:11.260 --> 00:07:15.340
They looked at the Object as one parameter
and that string as one parameter and

101
00:07:15.340 --> 00:07:21.290
went out and found that property on
that Object and gave me the value.

102
00:07:21.290 --> 00:07:24.380
Notice I also just outputted
the object itself.

103
00:07:24.380 --> 00:07:28.240
And I can see those two properties,
firstname and lastname.

104
00:07:28.240 --> 00:07:33.020
There's another property, this underscore,
underscore, proto, underscore, underscore.

105
00:07:33.020 --> 00:07:34.200
Don't worry about that right now.

106
00:07:34.200 --> 00:07:37.204
But we are gonna get into
that later in the course.

107
00:07:37.204 --> 00:07:42.303
For now, we'll just focus on these that
I've named, firstname and lastname.

108
00:07:42.303 --> 00:07:49.631
And I've outputted it the first name using
that special operator with the brackets.

109
00:07:49.631 --> 00:07:55.255
So, let's go back to our code and
let's talk about another operator,

110
00:07:55.255 --> 00:07:58.443
the more common operator and clearer and

111
00:07:58.443 --> 00:08:03.523
easier to type operator for
accessing properties and methods.

112
00:08:03.523 --> 00:08:06.463
Now this approach here
that we just talked about,

113
00:08:06.463 --> 00:08:08.845
you will see sometimes in frameworks and

114
00:08:08.845 --> 00:08:13.890
libraries because you can dynamically
decide what property you're trying to get.

115
00:08:13.890 --> 00:08:15.890
You can base it off a string.

116
00:08:15.890 --> 00:08:18.923
But it's much clearer and
easier to type the next one.

117
00:08:18.923 --> 00:08:22.130
All right, I'm going console.log
the first name again.

118
00:08:22.130 --> 00:08:27.660
But I'm going to use a different operator,
the dot operator.

119
00:08:27.660 --> 00:08:29.380
And it is just what it sounds like.

120
00:08:29.380 --> 00:08:32.720
Dot, then I can say, first name.

121
00:08:34.450 --> 00:08:36.980
The dot, is an operator, it's a function.

122
00:08:38.280 --> 00:08:41.779
And when used after an Object like that,
well,

123
00:08:41.779 --> 00:08:45.980
if I go back to my
JavaScriptOperatorPrecedence.pdf,

124
00:08:45.980 --> 00:08:52.467
you'll see it's just second from the top,
right after the parentheses for grouping.

125
00:08:52.467 --> 00:08:57.859
It's left to right and it's just a dot and
it takes two parameters,

126
00:08:57.859 --> 00:09:02.980
the object that you're looking at and
the name of the property.

127
00:09:02.980 --> 00:09:05.840
Notice I don't have to put
this in quotes or something.

128
00:09:05.840 --> 00:09:09.060
Although that's essentially
what it's doing.

129
00:09:09.060 --> 00:09:12.490
It's taking the object and
passing the string

130
00:09:12.490 --> 00:09:17.230
that represents the name of
the value that you are looking for.

131
00:09:17.230 --> 00:09:20.350
But I don't have to do that,
that's not a really accurate.

132
00:09:20.350 --> 00:09:21.100
You can't do that.

133
00:09:21.100 --> 00:09:27.730
It will simply, the syntax parser will
understand that after you put the dot,

134
00:09:27.730 --> 00:09:32.040
what you've actually typed will be
the string that's given to the dot.

135
00:09:32.040 --> 00:09:33.635
That's just a lot faster to type.

136
00:09:33.635 --> 00:09:40.659
Person.firstname, and if I run this since
I'm already outputting the person and

137
00:09:40.659 --> 00:09:45.440
firstname again,
I'll just get the firstname again.

138
00:09:45.440 --> 00:09:48.440
So I refresh and there it is.

139
00:09:48.440 --> 00:09:50.000
You see that?

140
00:09:50.000 --> 00:09:57.430
So the dot operator acted exactly
the same as the brackets operator here.

141
00:09:57.430 --> 00:09:59.580
This is Computed Member Access.

142
00:09:59.580 --> 00:10:02.100
And this is just called Member Access,

143
00:10:02.100 --> 00:10:06.080
the Member Access operator, members
being members of the Object, right?

144
00:10:06.080 --> 00:10:08.850
Your fingers and
your toes are members of your body.

145
00:10:08.850 --> 00:10:13.620
So these are looking for members of
the Object, the pieces, the methods, and

146
00:10:13.620 --> 00:10:14.980
the properties.

147
00:10:14.980 --> 00:10:17.780
So this went out and found this
property because it's just a string.

148
00:10:17.780 --> 00:10:18.680
It's not called a method.

149
00:10:18.680 --> 00:10:19.580
It's called a property.

150
00:10:19.580 --> 00:10:24.820
Okay, so
I could console.log person.lastname.

151
00:10:24.820 --> 00:10:28.020
Very readable, very easy to type.

152
00:10:28.020 --> 00:10:29.220
And that's what's really happening.

153
00:10:29.220 --> 00:10:32.380
It went out and
found that memory location,

154
00:10:32.380 --> 00:10:36.540
that reference by name that's
connected to that Object.

155
00:10:36.540 --> 00:10:39.572
And I could have set this
value as well the same way.

156
00:10:39.572 --> 00:10:44.840
In fact remember that the other
type of property you can have,

157
00:10:44.840 --> 00:10:48.510
as opposed to a primitive,
is also another Object.

158
00:10:48.510 --> 00:10:51.570
So i can attach another set of names and
values.

159
00:10:51.570 --> 00:10:54.690
Let's says that person.address.

160
00:10:54.690 --> 00:10:57.625
I'm gonna make that instead of a string or
a number or

161
00:10:57.625 --> 00:11:00.615
a Boolean,
I'll just make it another new Object.

162
00:11:00.615 --> 00:11:05.139
So it's an Object sitting
inside an Object and

163
00:11:05.139 --> 00:11:11.061
then I can use the dot operator for
example and add properties

164
00:11:13.501 --> 00:11:19.640
to my sub-object,
my child object, inside of here.

165
00:11:19.640 --> 00:11:23.920
Now remember these are operators, so
how do we know which one gets run first?

166
00:11:24.930 --> 00:11:29.820
Well, we go back and
we see that the associativity of

167
00:11:29.820 --> 00:11:33.858
the Member Access operator
is left-to-right.

168
00:11:33.858 --> 00:11:39.490
It has left associativity, meaning that
the left most dot will get run first, get

169
00:11:39.490 --> 00:11:44.230
called first, because they're functions,
and then moving on to the right.

170
00:11:44.230 --> 00:11:48.090
So this one between person and
address gets called first.

171
00:11:48.090 --> 00:11:51.720
So it says, okay,
I'll look at the person Object and

172
00:11:51.720 --> 00:11:55.030
look for a property or
a method that has that name.

173
00:11:55.030 --> 00:11:57.670
And then it finds that in memory.

174
00:11:58.810 --> 00:12:04.660
And this second dot operator is called and
it says, okay, on that Object that I just

175
00:12:04.660 --> 00:12:10.140
found in memory, I'll look for a property
or a method on that, called street.

176
00:12:10.140 --> 00:12:13.240
Now in this case it won't find it but
I'm setting a value so

177
00:12:13.240 --> 00:12:18.130
it will create it and
give it that initial value.

178
00:12:18.130 --> 00:12:19.900
And I could just keep doing this.

179
00:12:19.900 --> 00:12:21.500
So I might have address.city.

180
00:12:21.500 --> 00:12:26.240
Let's say New York.

181
00:12:26.240 --> 00:12:30.020
And state, let's say New York.

182
00:12:31.080 --> 00:12:34.910
And you could see I could make this other
subobject and subobjects and subobjects.

183
00:12:34.910 --> 00:12:39.510
And I could just keep going because
it's a left to right dot operator,

184
00:12:39.510 --> 00:12:41.300
left associative.

185
00:12:41.300 --> 00:12:45.420
And the Objects can keep containing
Objects which can contain other Objects

186
00:12:45.420 --> 00:12:47.470
which can contain other Objects.

187
00:12:47.470 --> 00:12:48.640
So, this is very powerful.

188
00:12:49.810 --> 00:12:53.120
Realize that the Objects themselves and
their properties and

189
00:12:53.120 --> 00:12:55.466
methods are all just sitting in memory.

190
00:12:55.466 --> 00:13:01.690
These dots, these brackets, passing
strings to them, they're just functions.

191
00:13:01.690 --> 00:13:05.480
They're just operators,
a way to access that information.

192
00:13:05.480 --> 00:13:08.310
So now I have this Object
sitting in memory.

193
00:13:08.310 --> 00:13:11.254
I could do a person.address.street and
output that and

194
00:13:11.254 --> 00:13:14.757
it'll go find it in memory running
those two different operators.

195
00:13:14.757 --> 00:13:19.412
I could go person.address.city and
it will find that.

196
00:13:19.412 --> 00:13:23.890
And I could on the same object
just use a different operator.

197
00:13:23.890 --> 00:13:29.250
So I could go address using the computed,
this is also left to right.

198
00:13:29.250 --> 00:13:34.978
If I look, it's left to right, so
I can also then just do another one.

199
00:13:34.978 --> 00:13:39.570
Let's say, state.

200
00:13:39.570 --> 00:13:42.290
This is essentially doing the same thing.

201
00:13:42.290 --> 00:13:44.870
It looks at the object,
finds a property or

202
00:13:44.870 --> 00:13:48.340
method called that,
runs this operator first.

203
00:13:48.340 --> 00:13:51.730
Then the second operator, it'll look for
a state property on that.

204
00:13:51.730 --> 00:13:53.840
And the dot is doing the same thing.

205
00:13:53.840 --> 00:14:00.610
And they're both simply accessing the same
memory locations via the same names.

206
00:14:00.610 --> 00:14:05.150
So they're just two different functions
that are essentially doing the same thing.

207
00:14:05.150 --> 00:14:08.945
And I'll refresh, and
there I'm outputting my values,

208
00:14:08.945 --> 00:14:12.363
that are sitting in memory,
using both operators.

209
00:14:12.363 --> 00:14:16.921
So again, Objects are name
value pairs sitting in memory.

210
00:14:16.921 --> 00:14:20.080
They can contain other name value pairs,
that is, other Objects.

211
00:14:20.080 --> 00:14:24.210
They can contain other properties,
strings, Booleans.

212
00:14:24.210 --> 00:14:26.551
They can contain numbers.

213
00:14:26.551 --> 00:14:28.763
They can also contain functions,
which are called methods.

214
00:14:28.763 --> 00:14:30.765
But we're not going to
quite get there yet,

215
00:14:30.765 --> 00:14:34.530
because there's a couple other
things we need to understand.

216
00:14:34.530 --> 00:14:36.660
But good enough for here.

217
00:14:36.660 --> 00:14:39.900
Remember that this is not the preferred
way to create a new Object.

218
00:14:39.900 --> 00:14:42.160
We'll get to that in just a second.

219
00:14:42.160 --> 00:14:47.470
And also remember that
although we can use the dot or

220
00:14:47.470 --> 00:14:52.870
we can use the computed, the bracket
notation here for finding properties and

221
00:14:52.870 --> 00:14:57.160
methods, the preferred approach
is just using the dot operator.

222
00:14:57.160 --> 00:15:04.071
It's very clean, it's very clear, and it's
also easier to debug and find problems.

223
00:15:04.071 --> 00:15:08.898
So I always recommend that you use the dot
operator unless you really need to

224
00:15:08.898 --> 00:15:13.271
access a property or properties
using some kind of dynamic string.

225
00:15:13.271 --> 00:15:18.640
Some kind of string that can be changed,
that you can look at programmatically.

226
00:15:18.640 --> 00:15:21.590
But to start with,
always use the dot operator.

227
00:15:21.590 --> 00:15:22.600
That's Objects and the dot.

