WEBVTT

1
00:00:02.120 --> 00:00:08.180
We're now going to talk about the most
fundamental, important concept

2
00:00:08.180 --> 00:00:13.320
in moving from someone that just
uses JavaScript to someone that

3
00:00:13.320 --> 00:00:18.290
deeply understands it and
isn't scared by some of the weird and

4
00:00:18.290 --> 00:00:20.600
odder looking things
that happen inside of it.

5
00:00:21.800 --> 00:00:24.984
A concept that will
expand your knowledge and

6
00:00:24.984 --> 00:00:29.927
ability as a programmer to use
JavaScript in ways that other modern and

7
00:00:29.927 --> 00:00:33.301
popular programming languages can't match.

8
00:00:33.301 --> 00:00:38.499
The idea is called first class functions.

9
00:00:39.910 --> 00:00:45.160
In JavaScript, functions are objects.

10
00:00:45.160 --> 00:00:49.430
All right, well,
first of all, big word alert.

11
00:00:50.570 --> 00:00:54.181
First class functions sounds complicated.

12
00:00:54.181 --> 00:00:55.390
Not really.

13
00:00:57.750 --> 00:01:02.110
First class functions means that
in the programming language.

14
00:01:02.110 --> 00:01:05.970
JavaScript isn't the only language
that has first class functions,

15
00:01:05.970 --> 00:01:09.850
but I would say it's definitely
the most popular nowadays.

16
00:01:11.340 --> 00:01:16.803
Everything you can do with other types,
objects,

17
00:01:16.803 --> 00:01:23.298
strings, numbers, booleans,
you can do with functions.

18
00:01:23.298 --> 00:01:29.060
You can assign variables to
have a value that's a function.

19
00:01:29.060 --> 00:01:34.680
You can pass functions around as
parameters to other functions.

20
00:01:34.680 --> 00:01:40.060
You can create functions on the fly
with the kind of literal syntax.

21
00:01:41.680 --> 00:01:45.500
First class functions change
the way you can program.

22
00:01:46.790 --> 00:01:51.530
They can open up the horizons
to completely different

23
00:01:51.530 --> 00:01:55.260
approaches to solving problems.

24
00:01:56.680 --> 00:02:02.380
So when we say that functions
are objects in JavaScript,

25
00:02:02.380 --> 00:02:04.730
what does the function object look like?

26
00:02:05.780 --> 00:02:10.600
Well, just like any object in JavaScript,
it resides in memory.

27
00:02:11.710 --> 00:02:16.840
It's a special type of object, though,
because it has all the features

28
00:02:16.840 --> 00:02:21.420
of a normal object and
has some other special properties.

29
00:02:22.440 --> 00:02:27.550
So one thing that people are surprised
about when they see JavaScript is that

30
00:02:27.550 --> 00:02:31.900
you can attach properties and
methods to a function.

31
00:02:31.900 --> 00:02:33.040
Why?

32
00:02:33.040 --> 00:02:35.030
Because it's just an object.

33
00:02:35.030 --> 00:02:37.860
So I could attach a primitive,
a name value pair.

34
00:02:39.220 --> 00:02:40.630
I could attach an object.

35
00:02:40.630 --> 00:02:42.870
I could attach other functions.

36
00:02:43.990 --> 00:02:48.120
This actually does happen and
can be useful in JavaScript,

37
00:02:48.120 --> 00:02:48.970
and we'll see that later.

38
00:02:50.840 --> 00:02:55.830
In JavaScript, though, the function object
has some hidden special properties.

39
00:02:57.100 --> 00:03:00.110
Two important ones are its name.

40
00:03:01.510 --> 00:03:05.640
Now a function in JavaScript
doesn't have to have a name.

41
00:03:06.720 --> 00:03:07.490
A function, then,

42
00:03:07.490 --> 00:03:13.060
can be what's called anonymous,
anonymous meaning it doesn't have a name.

43
00:03:13.060 --> 00:03:14.260
But it can have a name.

44
00:03:15.660 --> 00:03:19.460
There's another property
called the code property

45
00:03:19.460 --> 00:03:24.050
where the actual lines of
code that you've written sit.

46
00:03:25.240 --> 00:03:31.900
So essentially, from this vantage
point anyway that we're talking about,

47
00:03:31.900 --> 00:03:37.170
the code that you write gets placed into
a special property of the function object.

48
00:03:38.240 --> 00:03:41.560
So it isn't like the code that
you write is the function.

49
00:03:42.640 --> 00:03:47.140
The function is an object
with other properties.

50
00:03:47.140 --> 00:03:51.220
And the code that you write is just
one of those properties that you're

51
00:03:51.220 --> 00:03:51.937
adding onto it.

52
00:03:52.950 --> 00:03:58.020
What's special about that
property is it's invocable,

53
00:03:58.020 --> 00:04:01.870
meaning that you can say, run this code.

54
00:04:01.870 --> 00:04:03.950
Run the code sitting on that property.

55
00:04:03.950 --> 00:04:07.295
And that's when the entire
execution context creation and

56
00:04:07.295 --> 00:04:09.900
execution on all of that happens.

57
00:04:11.300 --> 00:04:16.820
It's imperative that you have this
mental model of a function in your mind

58
00:04:16.820 --> 00:04:18.670
as we go through the rest of this course.

59
00:04:19.950 --> 00:04:23.190
You have to think of
a function object whose

60
00:04:23.190 --> 00:04:27.490
code just happens to be one of
the properties of that object.

61
00:04:27.490 --> 00:04:31.040
There are other things that
the function can have attached to it.

62
00:04:31.040 --> 00:04:33.040
There are other things
the function can do.

63
00:04:33.040 --> 00:04:38.870
And it can be moved around, copied and
given to other elements or other areas of

64
00:04:38.870 --> 00:04:43.280
your code, just like any object or value,
just like a string or just like a number.

65
00:04:44.640 --> 00:04:50.400
This allows for
some fascinating programming approaches.

66
00:04:50.400 --> 00:04:54.908
And it allows for some really
interesting syntax that can look

67
00:04:54.908 --> 00:04:59.774
really weird if you don't understand
this fundamental concept.

68
00:04:59.774 --> 00:05:03.620
All right, just to prove it,
let's try something.

69
00:05:05.030 --> 00:05:09.670
All right, I have an empty f.js file and
I'm gonna just type out a function.

70
00:05:09.670 --> 00:05:14.885
Let's say function greet, and
it's just going to console.log('hi').

71
00:05:16.730 --> 00:05:18.540
So it's a function.

72
00:05:18.540 --> 00:05:22.430
But remember we said that functions
are actually objects in JavaScript.

73
00:05:23.450 --> 00:05:27.270
So using dot notation I
can create a property.

74
00:05:27.270 --> 00:05:31.840
Let's say language = 'english'.

75
00:05:32.910 --> 00:05:34.140
Look at that for a second.

76
00:05:34.140 --> 00:05:34.680
Take that in.

77
00:05:36.190 --> 00:05:39.680
I just added a property to a function.

78
00:05:41.560 --> 00:05:46.810
In other programming languages, this
just isn't possible, but in JavaScript,

79
00:05:46.810 --> 00:05:51.390
functions are objects, and the code I
wrote is just a property of that object.

80
00:05:53.110 --> 00:05:58.970
Now if I was to console.log(greet);,
something interesting happens.

81
00:05:58.970 --> 00:06:03.760
In JavaScript I actually get the text
of the function that I wrote.

82
00:06:04.940 --> 00:06:09.080
So that's not too useful in this case, but

83
00:06:09.080 --> 00:06:13.750
if I actually try to go find
that property on that function,

84
00:06:13.750 --> 00:06:18.730
using the dot operator, there it is.

85
00:06:19.880 --> 00:06:21.180
The value is there.

86
00:06:21.180 --> 00:06:22.420
It's in memory.

87
00:06:22.420 --> 00:06:24.870
It's a property attached to the function,

88
00:06:24.870 --> 00:06:28.820
just like you could attach
a property to any object.

89
00:06:28.820 --> 00:06:31.810
Because in JavaScript, functions are what?

90
00:06:33.340 --> 00:06:33.979
Objects.

91
00:06:36.430 --> 00:06:41.250
So when I created this function,
what did it look like?

92
00:06:42.850 --> 00:06:48.290
I had this greet function,
and when it was created,

93
00:06:50.030 --> 00:06:54.590
this function object was put in memory,
in this case,

94
00:06:54.590 --> 00:06:58.890
onto the global object, and it had a name.

95
00:06:59.960 --> 00:07:04.510
So the name property is greet,
because that's what I named my function.

96
00:07:06.020 --> 00:07:11.140
And it has a code property that
contains the code that I wrote,

97
00:07:11.140 --> 00:07:13.530
the body of my function.

98
00:07:14.970 --> 00:07:19.645
And so if I was to call
greet using the parentheses,

99
00:07:19.645 --> 00:07:23.559
that invokes that code, causes it to run,

100
00:07:23.559 --> 00:07:29.139
causes that execution context
to be created, etc., etc.

101
00:07:29.139 --> 00:07:30.952
See how this works?

102
00:07:30.952 --> 00:07:37.190
You have to think of a function as
more than just this container of code.

103
00:07:38.420 --> 00:07:43.070
It's an object, and as such,
you can pass it around.

104
00:07:43.070 --> 00:07:45.070
It sits in memory at a specific location.

105
00:07:45.070 --> 00:07:47.700
It has properties, it has methods.

106
00:07:47.700 --> 00:07:48.680
Why?

107
00:07:48.680 --> 00:07:55.260
Because, say it with me,
in JavaScript functions are objects.

108
00:07:56.820 --> 00:08:02.260
All right, now we're going to see just
how interesting this can make our code.

