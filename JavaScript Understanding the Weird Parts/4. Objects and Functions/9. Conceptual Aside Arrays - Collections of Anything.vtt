WEBVTT

1
00:00:02.170 --> 00:00:04.860
It's time for another Conceptual Aside.

2
00:00:04.860 --> 00:00:10.000
This one is Arrays,
Collections of Anything.

3
00:00:10.000 --> 00:00:13.830
I'll assume that you're already familiar
with the basic concept of arrays,

4
00:00:13.830 --> 00:00:17.270
and perhaps you've seen or
worked with them in JavaScript.

5
00:00:17.270 --> 00:00:18.840
But just to be clear,

6
00:00:18.840 --> 00:00:23.488
an array is a collection that
holds many things inside of it.

7
00:00:23.488 --> 00:00:27.810
So an array can be declared.

8
00:00:27.810 --> 00:00:29.040
Let's just call it arr.

9
00:00:29.040 --> 00:00:34.650
I can either go new Array,
which is a lot to type.

10
00:00:35.780 --> 00:00:39.090
Or I can use the array literal syntax.

11
00:00:39.090 --> 00:00:42.050
Very much like the object
literal syntax except it's

12
00:00:42.050 --> 00:00:44.720
brackets instead of curly braces.

13
00:00:44.720 --> 00:00:49.020
And then I can put my values,
whatever I want,

14
00:00:49.020 --> 00:00:53.220
to be in the array separated by commas.

15
00:00:53.220 --> 00:00:58.546
And JavaScript arrays are zero based
meaning that I then use brackets

16
00:00:58.546 --> 00:01:03.840
to determine what element I want to grab.

17
00:01:05.050 --> 00:01:08.710
And so it'll be 0 for the first one,
1 for the second one,

18
00:01:08.710 --> 00:01:10.760
2 for the third one, and so on.

19
00:01:10.760 --> 00:01:12.440
So we start with 0 and go forward.

20
00:01:13.440 --> 00:01:18.390
So, that's pretty clear for anyone
that's done any programming with arrays.

21
00:01:18.390 --> 00:01:21.030
That said,
JavaScript arrays are a bit different.

22
00:01:22.100 --> 00:01:25.520
Because JavaScript is dynamically typed.

23
00:01:25.520 --> 00:01:29.340
In most programming languages,
an array can hold a list or

24
00:01:29.340 --> 00:01:32.530
a collection of things
of a particular type.

25
00:01:32.530 --> 00:01:39.210
So an array of numbers, or an array
of strings, or an array of objects.

26
00:01:39.210 --> 00:01:41.100
But JavaScript doesn't like that.

27
00:01:41.100 --> 00:01:43.390
It figures out what types
of things are on the fly.

28
00:01:43.390 --> 00:01:44.720
It's dynamically typed.

29
00:01:45.770 --> 00:01:49.120
So I can put whatever
I want into an array.

30
00:01:49.120 --> 00:01:54.870
And I can mix and match each individual
item in an array can be a different type.

31
00:01:56.240 --> 00:02:02.970
So, I might have a 1 number and then my
second one might be a boolean, false.

32
00:02:04.430 --> 00:02:06.460
And, maybe my third one is an object.

33
00:02:06.460 --> 00:02:10.740
All right, let's just give
ourselves a little white space.

34
00:02:10.740 --> 00:02:12.400
Don't be scared by this white space.

35
00:02:12.400 --> 00:02:16.480
It's just making things easier to read,
still works exact same way and

36
00:02:16.480 --> 00:02:18.670
the engine processes it the same way.

37
00:02:19.980 --> 00:02:22.050
Maybe my third one isn't object literal.

38
00:02:24.380 --> 00:02:29.720
So maybe I'll have a name property, and an
address property or something like that.

39
00:02:29.720 --> 00:02:32.350
So I could have an object
sitting in my array.

40
00:02:32.350 --> 00:02:35.670
And then maybe my fourth one

41
00:02:37.010 --> 00:02:41.120
here this is again one of those things
that people find a bit confusing.

42
00:02:41.120 --> 00:02:43.760
But, now that we understand
functions are objects and

43
00:02:43.760 --> 00:02:46.470
I can just use a function expression here.

44
00:02:48.965 --> 00:02:52.705
And then, I've created a function and
stuck it inside my array.

45
00:02:54.185 --> 00:02:58.947
And maybe I'll just
console.log(greeting + name).

46
00:02:58.947 --> 00:03:01.255
So I have a greeting, and
give it a name, it'll output.

47
00:03:02.395 --> 00:03:06.491
Again, this is an expression,
because it's not by itself,

48
00:03:06.491 --> 00:03:11.132
it's inside this array declaration so

49
00:03:11.132 --> 00:03:16.400
the JavaStrip engine understands that this
is creating a function on the fly there.

50
00:03:16.400 --> 00:03:18.100
It's not a function statement.

51
00:03:18.100 --> 00:03:19.890
It's a function expression.

52
00:03:19.890 --> 00:03:21.370
And maybe I'll put one more thing,
a string.

53
00:03:22.920 --> 00:03:27.795
Now I've got this array that contains a
number, a boolean, an object, a function,

54
00:03:27.795 --> 00:03:28.620
and a string.

55
00:03:30.140 --> 00:03:34.280
So if I was to output this,
is this gonna give me an error?

56
00:03:35.895 --> 00:03:38.060
I run it in my browser.

57
00:03:38.060 --> 00:03:39.110
Nope.

58
00:03:39.110 --> 00:03:41.910
A number, a boolean, an object,
a function, a string.

59
00:03:43.160 --> 00:03:46.450
So a JavaScript array can
hold collections of anything.

60
00:03:47.590 --> 00:03:52.060
For that reason we can write lines of
code that look a little thirst and

61
00:03:52.060 --> 00:03:57.680
maybe a little strange, but are quite
interesting and quite simple really.

62
00:03:58.940 --> 00:04:02.430
Remember I have my array,
I can reference an element in it.

63
00:04:02.430 --> 00:04:07.586
So let's say I wanna reference
the function, so it's zero,

64
00:04:07.586 --> 00:04:12.357
1, two, and the third element
in the array so to three.

65
00:04:12.357 --> 00:04:14.280
Now I have a function.

66
00:04:14.280 --> 00:04:17.170
Right here,
this will get that function for memory.

67
00:04:17.170 --> 00:04:18.750
And how do I then run the function?

68
00:04:18.750 --> 00:04:19.990
How do I invoke a function?

69
00:04:21.500 --> 00:04:23.900
Well I invoke it with parentheses.

70
00:04:23.900 --> 00:04:26.050
And this function wants a name variable.

71
00:04:27.340 --> 00:04:28.880
So maybe I'd like to give it this name.

72
00:04:30.450 --> 00:04:31.100
How would I do that?

73
00:04:33.160 --> 00:04:35.500
I can just go to my array,

74
00:04:35.500 --> 00:04:39.270
that's the second element there,
or the third element, rather.

75
00:04:39.270 --> 00:04:46.486
Zero base zero, one, two, so,
it's the third element, so I use a two.

76
00:04:46.486 --> 00:04:51.440
And then .name,
cuz this gives me the object

77
00:04:51.440 --> 00:04:57.220
use the dot operator and it will then,
let me grab the name property.

78
00:04:57.220 --> 00:05:02.120
So I'm passing the name property
of the third item in the array,

79
00:05:03.720 --> 00:05:06.880
to a function that I'm calling
that's the fourth item in the array.

80
00:05:06.880 --> 00:05:08.830
Do you see that?

81
00:05:11.190 --> 00:05:14.190
Looks kind of strange but it works.

82
00:05:15.620 --> 00:05:21.412
I'll just add a space here,
make it look a little nicer there you go.

83
00:05:21.412 --> 00:05:26.460
So arrays can hold anything.

84
00:05:26.460 --> 00:05:29.229
I can reference them and
they can even hold functions.

85
00:05:30.280 --> 00:05:31.090
And I can call them.

86
00:05:32.720 --> 00:05:37.350
This is a neat thing about JavaScripts
dynamic typing and can be useful.

87
00:05:38.540 --> 00:05:39.350
All right, let's move on.

