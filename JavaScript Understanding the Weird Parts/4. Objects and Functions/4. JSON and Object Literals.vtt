WEBVTT

1
00:00:01.960 --> 00:00:05.970
I wanna take just a moment now that
we've talked about object literals and

2
00:00:05.970 --> 00:00:11.500
explain a common mistake or misconception
that people have when it comes to JSON.

3
00:00:12.730 --> 00:00:19.200
JSON, if you haven't heard of it before,
stands for JavaScript Object Notation.

4
00:00:20.340 --> 00:00:25.220
It's inspired by object literal
syntax in JavaScript and

5
00:00:25.220 --> 00:00:29.040
so it's called JavaScript object notation.

6
00:00:29.040 --> 00:00:33.550
And it looks an awful lot
like object literal syntax.

7
00:00:33.550 --> 00:00:37.690
But a common mistake is to think that
they're the exact same thing and

8
00:00:37.690 --> 00:00:39.099
then run across some errors.

9
00:00:40.380 --> 00:00:42.070
Lets take a quick look.

10
00:00:42.070 --> 00:00:45.860
So I have my blank app.JS file again.

11
00:00:45.860 --> 00:00:52.520
JavaScript object notation is inspired by
the object literal notation in JavaScript.

12
00:00:52.520 --> 00:00:56.100
So if I was to create
an object literal and

13
00:00:56.100 --> 00:00:59.220
lets say it had a couple of properties,
so I'm creating an object with

14
00:00:59.220 --> 00:01:03.940
with those curly braces I'm making
a property called first name, it's Mary.

15
00:01:03.940 --> 00:01:10.520
A comma and another property and I'll
just make it a boolean is a programmer.

16
00:01:10.520 --> 00:01:17.420
All right so this is completely
valid JavaScript, I can output this.

17
00:01:18.490 --> 00:01:21.720
And I can go here, refresh.

18
00:01:21.720 --> 00:01:24.810
And there's my object,
first name and is a programmer.

19
00:01:24.810 --> 00:01:27.350
We've already seen this.

20
00:01:28.480 --> 00:01:29.250
So here's what happened.

21
00:01:31.710 --> 00:01:37.170
In previous years,
data was sent over the internet in various

22
00:01:37.170 --> 00:01:42.390
formats and the format that was
landed upon for a while was xml.

23
00:01:43.560 --> 00:01:46.910
So, just to show what that looks like,
I might have had an object.

24
00:01:46.910 --> 00:01:51.120
This isn't valid JavaScript, I'm just
showing the example I might have sent this

25
00:01:51.120 --> 00:01:56.600
across the wire,
across the internet formatted like this.

26
00:01:56.600 --> 00:02:03.500
Where I had tags surrounding the data

27
00:02:03.500 --> 00:02:09.390
and then the server would get this
information and be able to parse it out.

28
00:02:09.390 --> 00:02:13.920
Now that's fine but
the problem is when you're

29
00:02:13.920 --> 00:02:18.440
dealing with download times,
how fast something is and how much data,

30
00:02:18.440 --> 00:02:21.820
how much bandwidth are you using,
this is a lot of extra

31
00:02:21.820 --> 00:02:27.030
unnecessary characters that make the
amount of data that you're sending larger.

32
00:02:27.030 --> 00:02:32.400
Just to send one piece of data I'm
actually sending the property name twice.

33
00:02:32.400 --> 00:02:37.470
That's a huge amount of
wasted download bandwidth

34
00:02:37.470 --> 00:02:39.160
if you were dealing with a lot of data.

35
00:02:40.430 --> 00:02:46.730
So what people did was looked at
the JavaScript object notation and

36
00:02:46.730 --> 00:02:52.280
say, hey, that would make
a really great way to send data

37
00:02:52.280 --> 00:02:56.270
across the Internet instead
of sending it in this format.

38
00:02:56.270 --> 00:03:00.910
Why don't we make a string that
looks something like this?

39
00:03:03.190 --> 00:03:09.170
And so now a days we pretty much
send data via the JSON format.

40
00:03:09.170 --> 00:03:11.670
Its just a string of data but

41
00:03:11.670 --> 00:03:16.140
it looks like object literal syntax
except for some differences.

42
00:03:16.140 --> 00:03:21.560
For example, properties have to be
wrapped in quotes so I'll just wrap

43
00:03:23.610 --> 00:03:30.040
my property names in quotes and
make all the quotes consistent and

44
00:03:30.040 --> 00:03:35.680
this is valid object literal syntax.

45
00:03:35.680 --> 00:03:38.820
Your properties can be wrapped in quotes

46
00:03:38.820 --> 00:03:42.770
in JavaScript object literal
notation in that syntax.

47
00:03:42.770 --> 00:03:44.650
This is just fine.

48
00:03:44.650 --> 00:03:49.510
But they have to be
wrapped in quotes in JSON.

49
00:03:49.510 --> 00:03:53.910
So if you have something that says,
well I parse JSON, some program,

50
00:03:53.910 --> 00:03:59.740
some library that you're using on PHP or
ASP.NET or some server technology,

51
00:04:01.070 --> 00:04:06.300
when it says I parse JSON, it expects
the properties to be wrapped in quotes.

52
00:04:06.300 --> 00:04:11.990
So JSON is technically a subset
of the object literal syntax.

53
00:04:11.990 --> 00:04:16.200
Meaning that anything that is JSON valid

54
00:04:16.200 --> 00:04:21.000
is also valid JavaScript
object literal syntax.

55
00:04:21.000 --> 00:04:25.950
But not all object literal
syntax is valid JSON.

56
00:04:27.250 --> 00:04:30.600
So JSON has stricter rules
about what it can be.

57
00:04:31.900 --> 00:04:38.655
So JSON, JavaScript Object Notation,
isn't really a part of JavaScript.

58
00:04:38.655 --> 00:04:43.075
But because it's so popular and
because it's so easy for

59
00:04:43.075 --> 00:04:45.755
JavaScript to understand what this is,

60
00:04:45.755 --> 00:04:50.550
JavaScript does come with some built in
functionality to transfer between the two.

61
00:04:51.610 --> 00:04:56.736
So, for any object I can do JSON,

62
00:04:56.736 --> 00:05:00.948
this is a built in feature in

63
00:05:00.948 --> 00:05:05.539
JavaScript, .stringify.

64
00:05:05.539 --> 00:05:07.106
Give it that object.

65
00:05:09.103 --> 00:05:12.760
And it will convert
the object to a JSON string.

66
00:05:13.830 --> 00:05:17.130
And, if I have a string that's JSON,
so let me make this a string,

67
00:05:17.130 --> 00:05:18.550
I'll wrap it in single quotes.

68
00:05:18.550 --> 00:05:22.830
Note that I'm using double
quotes here inside and

69
00:05:22.830 --> 00:05:26.750
single quotes on the outside so that
they don't collide and cause an error.

70
00:05:27.780 --> 00:05:33.090
But, I can then do JSON.parse,
and it will take a string.

71
00:05:34.160 --> 00:05:37.210
Let's just say this is my jsonValue.

72
00:05:38.380 --> 00:05:46.145
It will take a string and
convert it to a JavaScript object.

73
00:05:46.145 --> 00:05:49.862
So, let's console.log the jsonValue.

74
00:05:51.100 --> 00:05:56.420
So here I'm taking
an object in JavaScript and

75
00:05:56.420 --> 00:06:02.110
stringifying it so
it becomes JSON syntax as a string and

76
00:06:02.110 --> 00:06:04.910
maybe something I could send to
a server or something like that.

77
00:06:04.910 --> 00:06:09.960
And in this case I'm taking
a string that's proper JSON and

78
00:06:09.960 --> 00:06:13.140
converting it back to an object.

79
00:06:13.140 --> 00:06:14.896
So, what should I see in the console?

80
00:06:14.896 --> 00:06:19.490
A string, and then the object.

81
00:06:19.490 --> 00:06:21.030
And notice what it did.

82
00:06:21.030 --> 00:06:26.580
It wrapped those property names in quotes,
because that's valid JSON.

83
00:06:27.650 --> 00:06:32.760
So I'm just showing this because people
get confused about object literal

84
00:06:32.760 --> 00:06:35.400
versus JSON string.

85
00:06:35.400 --> 00:06:37.430
They're two different things.

86
00:06:37.430 --> 00:06:42.950
JavaScript does have some utilities to
allow you to transfer between the two.

87
00:06:42.950 --> 00:06:46.305
But don't get them confused
as if they're the same thing.

88
00:06:46.305 --> 00:06:49.860
JSON is more strict and
requires quotes around the names,

89
00:06:49.860 --> 00:06:52.700
doesn't let you put functions
as values and things like that.

90
00:06:53.920 --> 00:06:58.910
However it does look very similar and
has made for a really easy transition

91
00:06:58.910 --> 00:07:04.670
when pushing data from the client
in a browser to the server.

92
00:07:04.670 --> 00:07:07.720
Or in the case of things like Node.js,

93
00:07:07.720 --> 00:07:11.910
where you're running JavaScript on the
server, accepting data in a JSON format.

94
00:07:13.330 --> 00:07:16.480
All right, so
that's object literals in JSON.

