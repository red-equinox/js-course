WEBVTT

1
00:00:02.336 --> 00:00:07.316
It's time to talk about
three functions that have

2
00:00:07.316 --> 00:00:11.586
a lot of people that
are newer to JavaScript

3
00:00:11.586 --> 00:00:16.115
scratching their heads Call Apply and
Bind.

4
00:00:16.115 --> 00:00:19.645
These three functions have to do with
something we've already talked about.

5
00:00:21.055 --> 00:00:24.665
In our execution context we
have our Variable Environment,

6
00:00:24.665 --> 00:00:26.745
Outer Environment reference and

7
00:00:26.745 --> 00:00:31.270
we have this thing, this variable
that's set up for us called 'this'.

8
00:00:31.270 --> 00:00:35.820
We've already seen that the this key word
can point to the global object in some

9
00:00:35.820 --> 00:00:41.010
cases, and in other cases it
can point to the object that

10
00:00:41.010 --> 00:00:45.210
contains the function, if the function
is a method attached to an object.

11
00:00:46.880 --> 00:00:53.220
Wouldn't it be nice to be able to control
what the this variable ends up being?

12
00:00:53.220 --> 00:00:55.180
When the execution context is created.

13
00:00:56.830 --> 00:00:58.940
Well, Java script has
a way to do just that.

14
00:01:00.690 --> 00:01:03.460
And that's where call,
apply and bind come in.

15
00:01:03.460 --> 00:01:07.070
We could have talked about this before,

16
00:01:07.070 --> 00:01:10.410
when we talked about objects,
functions, and this variable.

17
00:01:11.650 --> 00:01:16.100
But to properly and
fully understand call, apply and bind.

18
00:01:16.100 --> 00:01:18.930
Especially when looking
at it syntactically.

19
00:01:20.030 --> 00:01:24.020
We need it to have a complete
understanding of first class functions.

20
00:01:24.020 --> 00:01:30.935
So, we already know a function is
a special kind of object, it has a hidden

21
00:01:30.935 --> 00:01:35.915
optional name property which can be
anonymous then if you don't have a name.

22
00:01:35.915 --> 00:01:39.995
We have a code property
that contains the code and

23
00:01:39.995 --> 00:01:43.655
that code property is invokable so
we can run the code.

24
00:01:45.610 --> 00:01:50.010
All functions in
JavaScript also get access

25
00:01:51.060 --> 00:01:55.280
to some special functions,
some special methods, on their own.

26
00:01:55.280 --> 00:01:59.630
Remember, a function is just an object,
so it can have properties and methods.

27
00:02:00.760 --> 00:02:04.620
So, all functions have
access to a call method,

28
00:02:05.740 --> 00:02:09.390
an apply method, and a bind method.

29
00:02:10.660 --> 00:02:15.409
And all three of these
have to do with the this

30
00:02:15.409 --> 00:02:19.030
variable and the arguments that
you pass to the function as well.

31
00:02:19.030 --> 00:02:21.130
All right.

32
00:02:21.130 --> 00:02:22.590
Let's take a look.

33
00:02:22.590 --> 00:02:24.770
Let's suppose I have an object,

34
00:02:24.770 --> 00:02:30.070
a person object I'm gonna
use object literal syntax.

35
00:02:30.070 --> 00:02:33.380
Give a first name 'John' as the property.

36
00:02:33.380 --> 00:02:36.540
A last name 'Doe' as property.

37
00:02:36.540 --> 00:02:40.420
Let's do a method called getFullName.

38
00:02:40.420 --> 00:02:43.500
Inside my object literal I
use a function expression.

39
00:02:45.840 --> 00:02:47.340
Set up this function.

40
00:02:47.340 --> 00:02:50.592
Let's say I use this.firstname,

41
00:02:50.592 --> 00:02:55.220
this.lastname, and
then I'll return fullname.

42
00:02:57.530 --> 00:03:02.100
So I have this object with these
two properties and this method.

43
00:03:02.100 --> 00:03:05.400
The method uses the this keyword.

44
00:03:05.400 --> 00:03:10.920
And remember since this is a method on
an object an this function is executed

45
00:03:10.920 --> 00:03:15.090
this key word will point to this
whole object the person object.

46
00:03:15.090 --> 00:03:16.815
The object that contains the method.

47
00:03:18.030 --> 00:03:24.605
All right so, what about call,
apply and bind?

48
00:03:24.605 --> 00:03:29.270
Well, let's imagine that
I have some logName

49
00:03:29.270 --> 00:03:34.710
function that exists
outside of this object.

50
00:03:34.710 --> 00:03:38.560
Maybe it takes a couple of parameters
about language and some other things.

51
00:03:39.780 --> 00:03:42.314
I'm just going to go ahead and
console.log.

52
00:03:43.410 --> 00:03:46.155
We're gonna say logged and

53
00:03:46.155 --> 00:03:53.080
then we're gonna say
this.getFullName(); all right.

54
00:03:53.080 --> 00:03:56.450
So, for starters,
we know that this will fail, right here.

55
00:03:56.450 --> 00:03:57.940
Why?

56
00:03:57.940 --> 00:04:03.580
Because the this keyword
here at the this level

57
00:04:03.580 --> 00:04:08.710
is going to be pointing to
the global object I'm not a method

58
00:04:08.710 --> 00:04:14.650
this function isn't a method
of the person objects so

59
00:04:14.650 --> 00:04:20.560
when I go to run this,
actually let me execute it, sorry.

60
00:04:21.990 --> 00:04:23.510
Let me go now run this.

61
00:04:24.720 --> 00:04:26.862
It says undefined is not a function.

62
00:04:26.862 --> 00:04:31.900
The this is the global object and
there is no getFullName.

63
00:04:31.900 --> 00:04:34.620
So that's undefined and
then I tried to invoke undefined.

64
00:04:35.920 --> 00:04:36.780
Then it gave me an error.

65
00:04:37.930 --> 00:04:40.190
Well, that makes sense, but

66
00:04:40.190 --> 00:04:45.840
wouldn't it be nice if I could control
what the this keyword points to?

67
00:04:47.470 --> 00:04:53.050
So let's make a new function
called logPersonName.

68
00:04:54.140 --> 00:04:56.770
And I'll use the logName function.

69
00:04:56.770 --> 00:05:02.850
And all functions in JavaScript
get access to these three methods.

70
00:05:02.850 --> 00:05:06.200
The first we'll use is .bind.

71
00:05:06.200 --> 00:05:08.890
Notice I'm not invoking the function and

72
00:05:08.890 --> 00:05:13.220
saying .bind because,
the function returns a value.

73
00:05:13.220 --> 00:05:18.600
I'm looking to actually use
the function as an object and

74
00:05:18.600 --> 00:05:20.696
call a method of that object.

75
00:05:20.696 --> 00:05:27.190
So just logName.bind,
because this is a function object, .bind.

76
00:05:27.190 --> 00:05:28.730
All function objects get this.

77
00:05:30.130 --> 00:05:34.130
And then,
I can pass to it whatever object I want

78
00:05:34.130 --> 00:05:38.130
to be the this variable
when the function runs.

79
00:05:40.280 --> 00:05:45.130
The bind function,
the bind method returns a new function.

80
00:05:45.130 --> 00:05:49.320
So, it actually makes a copy
of this logName function.

81
00:05:50.870 --> 00:05:54.640
And sets up this new function object,
this new copy.

82
00:05:54.640 --> 00:05:56.760
So that whenever it's run.

83
00:05:56.760 --> 00:05:59.080
When its execution context is created.

84
00:06:01.030 --> 00:06:05.680
The JavaScript engine sees that
this was created with this bind,

85
00:06:06.690 --> 00:06:09.490
which sets up some hidden things
in the background, so that.

86
00:06:10.510 --> 00:06:13.330
When the JavaScript engine decides
what is the this variable,

87
00:06:15.110 --> 00:06:17.200
it says well it must be that.

88
00:06:17.200 --> 00:06:19.780
Right there,
whatever was passed to the bind method.

89
00:06:21.650 --> 00:06:26.980
So I'm affecting the JavaScript engine
as far as what it decides when it

90
00:06:26.980 --> 00:06:31.660
creates the execution context for
this new copy of this function.

91
00:06:31.660 --> 00:06:36.800
So If I call logPersonName
instead of just logName,

92
00:06:36.800 --> 00:06:39.610
I call this new copy of this
function created with bind.

93
00:06:40.960 --> 00:06:44.320
When it says this,
this will be the person.

94
00:06:45.840 --> 00:06:46.920
This person object.

95
00:06:48.420 --> 00:06:54.840
So I can call the get dot get
full name and it logs it.

96
00:06:56.520 --> 00:06:57.020
See that?

97
00:06:58.950 --> 00:07:00.310
I could even have done this here.

98
00:07:00.310 --> 00:07:06.040
I could have created the function on
the fly and said .bind(person) and

99
00:07:06.040 --> 00:07:10.650
then if I call just logName()
instead of error-ing,

100
00:07:10.650 --> 00:07:15.552
this now points to a copy of this function
that was created on the fly bound with

101
00:07:15.552 --> 00:07:21.080
the this variable to whatever
I want to this variable to be.

102
00:07:21.080 --> 00:07:24.185
So this become essentially,
right here, preson.getName.

103
00:07:24.185 --> 00:07:26.680
Because I passed it in to the bind.

104
00:07:29.220 --> 00:07:32.170
That works too.

105
00:07:32.170 --> 00:07:37.910
So the .bind creates a copy of whatever
function you're calling it on.

106
00:07:37.910 --> 00:07:41.800
And then whatever methods you pass to it,

107
00:07:41.800 --> 00:07:48.692
whatever object you pass to this method,
the person object pass to bind,

108
00:07:48.692 --> 00:07:55.045
the person object is what the this
variable points to by reference.

109
00:07:55.045 --> 00:07:57.670
Make sense?

110
00:07:57.670 --> 00:08:02.350
So let's say that I want to also log.

111
00:08:03.980 --> 00:08:10.990
Let's do it below here, log my Arguments.

112
00:08:10.990 --> 00:08:14.820
Just so we see this as well,
everything that's happening.

113
00:08:14.820 --> 00:08:17.790
And then, first,
I'm going to call this a few times.

114
00:08:17.790 --> 00:08:21.870
I'll go ahead and
set up just a line or something so

115
00:08:21.870 --> 00:08:25.050
you can see every time this
is called the difference.

116
00:08:25.050 --> 00:08:27.850
All right so, I called this.

117
00:08:28.870 --> 00:08:30.960
Notice I have two undefined arguments.

118
00:08:30.960 --> 00:08:33.389
My language 1 and
language 2 are undefined.

119
00:08:34.590 --> 00:08:36.580
But I can pass an argument.

120
00:08:36.580 --> 00:08:38.520
Remember this is a copy of the function so

121
00:08:38.520 --> 00:08:43.550
it still takes the same arguments,
only this variable will be person.

122
00:08:44.550 --> 00:08:47.830
So that still works, and
I see English and undefined.

123
00:08:49.080 --> 00:08:52.730
I'll even just a put a space in
here just so we can see it clearly.

124
00:08:52.730 --> 00:08:57.440
How about that, there.

125
00:08:58.810 --> 00:09:02.410
This is what bind does,
creates a copy, and

126
00:09:02.410 --> 00:09:06.580
I can tell it what the this variable is,
at least in part.

127
00:09:07.600 --> 00:09:11.865
Let's move on first to call and
apply before we show anymore.

128
00:09:13.740 --> 00:09:19.930
If I do logName.call,
this calls the function.

129
00:09:19.930 --> 00:09:21.390
And invokes it.

130
00:09:21.390 --> 00:09:24.180
I could've also called the function
like that, with parenthesis.

131
00:09:25.470 --> 00:09:26.950
Move down a bit.

132
00:09:26.950 --> 00:09:30.570
But instead I did .call
instead of parenthesis,

133
00:09:30.570 --> 00:09:35.410
because .call also, lets me decide
what the this variable will be.

134
00:09:36.560 --> 00:09:41.600
The first thing I pass to call is what
the this keyword should point to.

135
00:09:43.580 --> 00:09:49.569
It works the same as these parentheses,
but lets me control what this means.

136
00:09:51.110 --> 00:09:53.130
And I can also pass it parameters.

137
00:09:55.140 --> 00:09:59.760
Unlike bind, which creates a copy of
the function, call actually executes it.

138
00:10:01.270 --> 00:10:04.460
And then just decides what
the this variable should be and

139
00:10:04.460 --> 00:10:08.640
the rest is just the parameters that I
would normally pass to the function.

140
00:10:09.890 --> 00:10:11.280
See that?

141
00:10:11.280 --> 00:10:18.670
So if I call this again, there's my .call,
it executed the function.

142
00:10:20.120 --> 00:10:23.070
This bind did not execute the function,
it created a copy.

143
00:10:24.590 --> 00:10:26.690
With the this variable setup.

144
00:10:26.690 --> 00:10:28.340
This one actually executed it.

145
00:10:28.340 --> 00:10:30.650
And I just passed the parameters as well.

146
00:10:33.640 --> 00:10:37.240
LogName.apply, all
functions can get .apply.

147
00:10:37.240 --> 00:10:39.260
This does the exact same thing.

148
00:10:39.260 --> 00:10:40.139
Only one difference.

149
00:10:42.070 --> 00:10:49.390
If I tried to pass variables like that,
I'd get an error.

150
00:10:49.390 --> 00:10:51.090
Arguments list has the wrong type.

151
00:10:52.090 --> 00:10:56.730
Because the apply method wants an array

152
00:10:56.730 --> 00:11:01.350
of parameters,
rather than just the normal list.

153
00:11:01.350 --> 00:11:04.180
And that's the only difference
between call and apply.

154
00:11:06.751 --> 00:11:07.670
And that works too.

155
00:11:09.510 --> 00:11:14.020
An array can be more useful especially
under mathematical circumstances.

156
00:11:14.020 --> 00:11:17.080
Let's say,
I was adding a bunch of numbers, and

157
00:11:17.080 --> 00:11:21.500
it could be any number of variables,
or other things like that.

158
00:11:22.680 --> 00:11:27.690
So, I just have two options
depending on how I'm coding,

159
00:11:27.690 --> 00:11:30.010
what my pattern is for
how I'm using this function.

160
00:11:31.460 --> 00:11:31.980
Make sense?

161
00:11:33.130 --> 00:11:37.130
And again, I could do this on the fly,
I could take this function,

162
00:11:37.130 --> 00:11:41.650
trick the syntax parser into realizing
it's not a normal function statement,

163
00:11:41.650 --> 00:11:43.400
it's a function expression.

164
00:11:43.400 --> 00:11:48.290
But rather than immediately
invoking it with these parentheses,

165
00:11:48.290 --> 00:11:54.180
I'll immediately invoke it using,
let's say, .apply or .call.

166
00:11:54.180 --> 00:12:01.240
And I'll say person and give it
an array of whatever I'm passing to it.

167
00:12:02.520 --> 00:12:04.040
See that?
It looks a little odd,

168
00:12:04.040 --> 00:12:06.850
but I'm just creating
a function on the fly.

169
00:12:06.850 --> 00:12:11.320
And then invoking it using .apply because
all function objects get access to

170
00:12:11.320 --> 00:12:15.800
this method, telling it what this is and
passing some arguments.

171
00:12:17.230 --> 00:12:19.446
So that should work again, and it does.

172
00:12:19.446 --> 00:12:23.620
Yet another list there.

173
00:12:23.620 --> 00:12:26.060
Just so you can see the difference,
I'll sort these two.

174
00:12:29.390 --> 00:12:30.168
There it is.

175
00:12:32.921 --> 00:12:35.490
So that's interesting.

176
00:12:35.490 --> 00:12:37.740
And I know what you're probably thinking.

177
00:12:37.740 --> 00:12:40.340
When would I ever actually
use this in real life?

178
00:12:42.170 --> 00:12:44.560
Well, let's talk about two instances.

179
00:12:44.560 --> 00:12:46.280
So I've scrolled down a bit in my code,

180
00:12:46.280 --> 00:12:50.629
and the first thing I'm going to show
is something called function borrowing.

181
00:12:51.800 --> 00:12:57.837
Let's say I have a second person
object with similar property names,

182
00:12:57.837 --> 00:13:02.560
but different data,
let's say Jane, lastname Doe.

183
00:13:03.880 --> 00:13:07.830
This is very similar to
my first person object,

184
00:13:07.830 --> 00:13:11.920
only the second one doesn't
have a getFullName method.

185
00:13:13.790 --> 00:13:19.670
So I'm going to do something called
function borrowing by using call or apply.

186
00:13:19.670 --> 00:13:26.469
I'll take that first person object I
created which does have the getFullName

187
00:13:26.469 --> 00:13:31.830
method and since it's a function,
it has access to .call and .apply.

188
00:13:31.830 --> 00:13:34.170
I'll just use .apply.

189
00:13:34.170 --> 00:13:36.760
So it's going to execute,
invoke this function.

190
00:13:36.760 --> 00:13:39.389
I am going to tell it, but

191
00:13:39.389 --> 00:13:45.040
the this keyword should
point to my person2 object.

192
00:13:47.270 --> 00:13:48.130
See that?

193
00:13:48.130 --> 00:13:52.140
So I am invoking this
method here on this object.

194
00:13:53.630 --> 00:13:58.700
But since it uses the this keyword
to access its other properties,

195
00:14:00.470 --> 00:14:05.480
I'm setting the this keyword
to my person2 object.

196
00:14:06.480 --> 00:14:14.800
So if I console.log the results of this,
Jane Doe.

197
00:14:16.180 --> 00:14:16.890
There it is.

198
00:14:18.380 --> 00:14:18.880
See that?

199
00:14:20.040 --> 00:14:23.870
So what I've done is
I've borrowed a function.

200
00:14:25.960 --> 00:14:31.420
This method here, this function on this
person object, I wanted to use it for

201
00:14:31.420 --> 00:14:36.730
my person2 object so
I borrowed it using the apply.

202
00:14:36.730 --> 00:14:38.490
I could have done
the same thing with call.

203
00:14:39.760 --> 00:14:41.260
Make sense?

204
00:14:41.260 --> 00:14:47.250
So you can grab methods from other
objects and use them as long as you have

205
00:14:47.250 --> 00:14:50.740
similar property names so
that the function works.

206
00:14:52.290 --> 00:14:57.070
Let's look at a second example,
called function currying.

207
00:14:57.070 --> 00:15:02.700
This in particular has to do
with the bind, the .bind.

208
00:15:02.700 --> 00:15:06.720
Because that's creating a copy of the
function, and it actually does something

209
00:15:06.720 --> 00:15:10.480
rather interesting if you
pass parameters to the bind.

210
00:15:11.710 --> 00:15:15.910
With call and apply, passing
parameters just passes the parameters.

211
00:15:15.910 --> 00:15:19.480
But with bind, you're creating
a new copy of the function.

212
00:15:19.480 --> 00:15:21.748
So what happens if you
pass parameters to it?

213
00:15:21.748 --> 00:15:28.130
Well, I'll say I'm going to create
a new function called multiply.

214
00:15:29.580 --> 00:15:31.830
That's just gonna return a times b.

215
00:15:31.830 --> 00:15:35.130
I'll pass it two things, two numbers,
and it will multiply them.

216
00:15:36.610 --> 00:15:41.543
Then I'm gonna create a new function.

217
00:15:43.585 --> 00:15:47.600
A copy of the multiply, using .bind.

218
00:15:47.600 --> 00:15:50.875
I don't care about what the this
keyword is in this case,

219
00:15:50.875 --> 00:15:52.795
I'm not using the this keyword.

220
00:15:52.795 --> 00:15:57.086
But I am going to give
it A parameter value.

221
00:15:57.086 --> 00:16:01.280
Now remember, bind is not calling,
it's not executing the function.

222
00:16:02.860 --> 00:16:04.545
So what does this do?

223
00:16:04.545 --> 00:16:08.490
Since I'm not executing it,
what does giving it parameters do?

224
00:16:09.960 --> 00:16:15.060
Giving it parameters
sets the permanent values

225
00:16:15.060 --> 00:16:19.120
of these parameters when the copy is made.

226
00:16:20.560 --> 00:16:25.200
So by setting two,
what I'm saying is the first parameter,

227
00:16:25.200 --> 00:16:30.390
cuz the first thing I put is the value
of this keyword, and then my parameters.

228
00:16:30.390 --> 00:16:36.470
The first parameter will always be
a two in this copy of the function.

229
00:16:36.470 --> 00:16:39.430
The variable A will always be a two.

230
00:16:39.430 --> 00:16:43.580
This is essentially equivalent
to taking this function and

231
00:16:43.580 --> 00:16:49.380
then setting up what this keyword will be,

232
00:16:49.380 --> 00:16:53.439
and then instead of having a I
just permanently set a to 2.

233
00:16:55.140 --> 00:16:55.640
See that?

234
00:16:57.010 --> 00:16:58.930
That's what this is doing right here.

235
00:17:00.820 --> 00:17:07.550
So, the bind is permanently
setting this right there and

236
00:17:07.550 --> 00:17:11.890
I can call my new function,

237
00:17:11.890 --> 00:17:17.370
my new copy and if I pass to
it,let's say a three or a four.

238
00:17:19.430 --> 00:17:23.410
This will end up as the second parameter,
the B.

239
00:17:24.910 --> 00:17:30.501
So, if I console.that log
inside the console.log.

240
00:17:34.478 --> 00:17:39.782
So, what I've done is said,
give me a copy of this function or

241
00:17:39.782 --> 00:17:42.638
that this variable is set up, and

242
00:17:42.638 --> 00:17:48.570
then also decided to set a permanent
value for this first parameter.

243
00:17:50.180 --> 00:17:54.610
When you call this new copy I've
essentially done away with this first

244
00:17:54.610 --> 00:17:59.510
parameter, and so whatever you pass
will be that second parameter.

245
00:17:59.510 --> 00:18:04.350
And so, if I run this eight,

246
00:18:06.300 --> 00:18:11.420
four, which is B, times two,
which is the permanent A.

247
00:18:12.690 --> 00:18:15.179
If I had passed both parameters to bind

248
00:18:16.190 --> 00:18:21.100
I'm essentially telling it
this is the value of a and

249
00:18:21.100 --> 00:18:26.190
b always, and this 4 just becomes an extra
parameter passed to the function.

250
00:18:27.290 --> 00:18:33.900
So even if I pass 4, it's going to be 2
and 2, so I'll always see result of 4.

251
00:18:33.900 --> 00:18:38.034
If I made a 5 it's still 2 and
2, 2 times 2 is 4.

252
00:18:39.900 --> 00:18:44.151
If I pass no parameters then I have A and
B open so

253
00:18:44.151 --> 00:18:48.293
I could do 5 and 2 and
that would be 10, but

254
00:18:48.293 --> 00:18:52.879
in this case I've
intentionally made a permanent

255
00:18:56.930 --> 00:19:03.550
Version, a permanent copy with
certain parameters by default.

256
00:19:03.550 --> 00:19:09.624
I've taken my multiply, and
I've made a multiply by two and

257
00:19:09.624 --> 00:19:14.863
I can take this multiply function and
make another,

258
00:19:14.863 --> 00:19:21.791
multipleByThree, set a to 3 and
then call that and I get 8 and 12.

259
00:19:21.791 --> 00:19:25.060
See that?

260
00:19:25.060 --> 00:19:27.040
I took a function and

261
00:19:27.040 --> 00:19:31.518
created a new function from it
with some default parameters.

262
00:19:31.518 --> 00:19:37.900
That's called currying.

263
00:19:37.900 --> 00:19:38.670
Big word alert.

264
00:19:41.050 --> 00:19:46.724
Function currying: creating a copy of a
function but with some preset parameters.

265
00:19:46.724 --> 00:19:52.310
Their cert turns out to be really
useful in mathematical situations,

266
00:19:52.310 --> 00:19:57.280
so if you're building a library that has
to do a lot of mathematical calculations,

267
00:19:57.280 --> 00:20:01.170
you can have some fundamental functions
that you can then build on with some other

268
00:20:01.170 --> 00:20:03.190
default parameters.

269
00:20:03.190 --> 00:20:06.330
A really good useful usage for bind.

270
00:20:07.660 --> 00:20:11.110
So that's it, that's call,
apply, and bind.

271
00:20:11.110 --> 00:20:17.720
Apply and call invoke the function and
let you set up the this key word and

272
00:20:17.720 --> 00:20:21.430
then pass the other parameters if
you want in two different ways.

273
00:20:22.760 --> 00:20:25.770
And bind creates a copy of the function,

274
00:20:25.770 --> 00:20:28.640
let's you set up what the this
key word should mean and

275
00:20:28.640 --> 00:20:32.850
also let's you set default parameters,
permanent preset parameters if you want.

276
00:20:34.580 --> 00:20:41.320
So, these are all useful and
you'll see them, don't be scared by them.

277
00:20:41.320 --> 00:20:46.430
They're just methods on the function
object that have to do with setting up for

278
00:20:46.430 --> 00:20:51.440
this keyword and how and
what happens when the function is invoked.

279
00:20:52.890 --> 00:20:54.350
All right, let's move on.

