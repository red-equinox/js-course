WEBVTT

1
00:00:02.210 --> 00:00:05.050
It's time for another Dangerous Aside.

2
00:00:05.050 --> 00:00:08.260
This is New and Functions.

3
00:00:09.660 --> 00:00:13.200
So we've already said that when
we're using function constructors

4
00:00:13.200 --> 00:00:14.920
that they're really just functions.

5
00:00:14.920 --> 00:00:16.540
They're regular functions.

6
00:00:16.540 --> 00:00:20.590
I'm adding the new operator in front
of them and that changes some things.

7
00:00:20.590 --> 00:00:22.740
Creates a new empty object,

8
00:00:22.740 --> 00:00:27.910
when the execution context runs it points
to this variable at that new empty object.

9
00:00:27.910 --> 00:00:31.280
And if you don't return anything
explicitly it returns that

10
00:00:31.280 --> 00:00:32.220
new object for you.

11
00:00:33.250 --> 00:00:37.556
But this is still just a function and
that's where the dangerous part comes in

12
00:00:37.556 --> 00:00:45.450
because if I forgot to
put on the new keyword.

13
00:00:45.450 --> 00:00:46.230
What's going to happen?

14
00:00:46.230 --> 00:00:49.660
Well it will still execute the function.

15
00:00:49.660 --> 00:00:54.680
The JavaScript engine doesn't know whether
or not you intend to execute the function

16
00:00:54.680 --> 00:00:57.520
or to execute the function
using the new keyword.

17
00:00:57.520 --> 00:00:59.110
It's just a function.

18
00:00:59.110 --> 00:01:01.600
So it'll let you just try to execute it.

19
00:01:01.600 --> 00:01:06.150
And since it doesn't return anything
explicitly, it returns undefined,

20
00:01:06.150 --> 00:01:09.690
which means your objects that you're
trying to create will actually be just be

21
00:01:09.690 --> 00:01:11.830
set equal to undefined.

22
00:01:11.830 --> 00:01:14.760
And when I try to use any properties or

23
00:01:14.760 --> 00:01:19.370
methods on that object since it's
undefined I'll get an error.

24
00:01:19.370 --> 00:01:19.870
Watch.

25
00:01:20.900 --> 00:01:21.559
There it is.

26
00:01:23.465 --> 00:01:28.961
I have undefined as my two objects and
when I try to use a method, it didn't

27
00:01:28.961 --> 00:01:35.020
go down the prototype chain because
it's not an object, it's just undefined.

28
00:01:35.020 --> 00:01:36.940
This is a real problem.

29
00:01:36.940 --> 00:01:42.069
This is one of the reason why people say
bad things about function constructor.

30
00:01:43.390 --> 00:01:48.210
But, function constructors are only there
in the first place to try to appease

31
00:01:48.210 --> 00:01:51.700
syntactically programmers
coming from other languages.

32
00:01:52.840 --> 00:01:54.930
So, it is kind of silly.

33
00:01:55.940 --> 00:01:58.790
But once you get used to it,
it's not that bad.

34
00:01:58.790 --> 00:02:03.400
And, you can make certain that
you are doing this properly

35
00:02:04.430 --> 00:02:06.910
by just following a simple convention.

36
00:02:08.390 --> 00:02:11.810
Any function that we intend
to be a function constructor,

37
00:02:13.030 --> 00:02:17.220
we use a capital letter for its name.

38
00:02:17.220 --> 00:02:18.720
The first letter is a capital letter.

39
00:02:20.300 --> 00:02:24.790
That way if I'm looking around and
I see that I have a bunch of errors and

40
00:02:24.790 --> 00:02:28.380
I notice a function call with
a capital letter without the new.

41
00:02:28.380 --> 00:02:33.160
Then I know I probably
forgot the new keyword.

42
00:02:33.160 --> 00:02:34.660
That's just a convention.

43
00:02:34.660 --> 00:02:37.430
There are some programs then that
could try to help you with that.

44
00:02:37.430 --> 00:02:38.660
They're called Linters.

45
00:02:38.660 --> 00:02:42.460
And they might see a function with
a first letter that's capital,

46
00:02:42.460 --> 00:02:43.940
and that you don't use a new keyword.

47
00:02:43.940 --> 00:02:46.510
And you can run your JavaScript
through those programs,

48
00:02:46.510 --> 00:02:49.210
so it warns you of those
kinds of problems.

49
00:02:49.210 --> 00:02:54.360
None the less, it's not a great solution
because the JavaScript engine itself

50
00:02:54.360 --> 00:03:00.160
doesn't Care whether you do or
you don't have the new operator on there.

51
00:03:00.160 --> 00:03:04.940
So you can make unintentional errors that
the JavaScript engine won't catch for

52
00:03:04.940 --> 00:03:07.364
you when it goes to run your program.

53
00:03:07.364 --> 00:03:10.620
You'll just just end up having errors in
the program itself as it's executing.

54
00:03:11.890 --> 00:03:15.940
So this is an aside about
the danger of this.

55
00:03:15.940 --> 00:03:20.790
I recommend if you're dealing
with function constructors, that

56
00:03:20.790 --> 00:03:25.510
you always have a capital letter
as the name of the constructor.

57
00:03:25.510 --> 00:03:27.770
That it starts with a capital letter.

58
00:03:27.770 --> 00:03:32.440
So that you can quickly pick up and remind
yourself that you need to use the new

59
00:03:32.440 --> 00:03:36.500
operator before invoking this function
to get your object back properly.

60
00:03:37.640 --> 00:03:41.980
Now that said, there are new ways
coming in JavaScript to create objects.

61
00:03:41.980 --> 00:03:43.970
So function constructors
are likely going away.

62
00:03:45.010 --> 00:03:46.940
They're not going to go
away completely though,

63
00:03:46.940 --> 00:03:51.960
because we still need to support years of
JavaScript programs that have been built.

64
00:03:51.960 --> 00:03:54.530
And you as a developer
unfortunately you're

65
00:03:54.530 --> 00:03:57.150
not always going to work
on brand new projects.

66
00:03:57.150 --> 00:03:59.620
There's plenty of times where you'll
work on older, what's called,

67
00:03:59.620 --> 00:04:03.390
legacy project and
you'll be dealing with these patterns.

68
00:04:03.390 --> 00:04:07.990
So, it's good to understand how they work,
they're just for building objects.

69
00:04:07.990 --> 00:04:12.880
But, be careful about making sure
that you have the new operator

70
00:04:12.880 --> 00:04:15.880
when you're using a function
as a function constructor.

